<Ui xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:schemaLocation="http://www.blizzard.com/wow/ui/ ..\FrameXML\UI.xsd" xmlns="http://www.blizzard.com/wow/ui/">
	<Script file="Changelog.lua"/>
	<Script file="HTMLUtils.lua"/>
	<Button name="OPButtonTemplate" virtual="true">
		<NormalTexture file="Interface\Buttons\UI-Panel-Button-Up">
			<TexCoords left="0" right="0.625" top="0" bottom="0.6875" />
		</NormalTexture>
		<PushedTexture file="Interface\Buttons\UI-Panel-Button-Down">
			<TexCoords left="0" right="0.625" top="0" bottom="0.6875" />
		</PushedTexture>
		<DisabledTexture file="Interface\Buttons\UI-Panel-Button-Disabled">
			<TexCoords left="0" right="0.625" top="0" bottom="0.6875" />
		</DisabledTexture>
		<HighlightTexture file="Interface\Buttons\UI-Panel-Button-Highlight" alphaMode="ADD">
			<TexCoords left="0" right="0.625" top="0" bottom="0.6875" />
		</HighlightTexture>
		<ButtonText name="$parentText">
			<FontHeight val="10" />
		</ButtonText>
		<NormalFont style="GameFontNormalSmall" />
		<HighlightFont style="GameFontHighlightSmall" />
		<DisabledFont style="GameFontDisableSmall" />
		<PushedTextOffset />
	</Button>
	<Actor name="ObjectMoverActorTemplate" mixin="ModelSceneActorMixin" virtual="true">
        <Scripts>
            <OnModelLoaded>
				if self.OnModelLoaded then self:OnModelLoaded() end
			</OnModelLoaded>
        </Scripts>
    </Actor>
	<Frame name="OPMainFrame" hidden="true" enableMouse="true" movable="true" resizable="true" clampedToScreen="true" parent="UIParent" ignoreParentScale="true">
		<Size x="355" y="355" />
		<ResizeBounds>
			<minResize x="200" y="200"/>
			<maxResize x="650" y="650"/>
		</ResizeBounds>
		<Anchors>
			<Anchor point="TOPRIGHT" relativeTo="UIParent">
				<Offset y="-280"/>
			</Anchor>
		</Anchors>
		<TitleRegion setAllPoints="true" />
		<Frames>
			<Frame parentKey="Border" inherits="DialogBorderTemplate"/>
			<Frame name="OPPanel1">
				<Size x="180" y="90" />
				<Anchors>
					<Anchor point="TOPRIGHT">
						<Offset x="-10" y="-10" />
					</Anchor>
				</Anchors>
				<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
					<BackgroundInsets>
						<AbsInset left="5" right="5" top="5" bottom="5" />
					</BackgroundInsets>
					<TileSize>
						<AbsValue val="16" />
					</TileSize>
					<EdgeSize>
						<AbsValue val="16" />
					</EdgeSize>
					<Color r="0.5" g="0.5" b="0.5" a="0"/>
					<BorderColor r="0.75" g="0.75" b="0.75"/>
				</Backdrop>
				<Frames>
					<Frame name="OPPanel1Title">
						<Size>
							<AbsDimension x="150" y="12" />
						</Size>
						<Anchors>
							<Anchor point="TOP">
								<Offset y="-5" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString name="OPPanel1TitleText" font="Fonts\FRIZQT__.TTF" text="Movement">
									<Anchors>
										<Anchor point="TOPLEFT" />
										<Anchor point="BOTTOMRIGHT" />
									</Anchors>
									<FontHeight val="12" />
									<Color r="1" g="0.8196079" b="0" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
					</Frame>
					<Frame parentKey="MovementButtonsAnchor">
						<Size x="10" y="10"/>
						<Anchors>
							<Anchor point="CENTER">
								<Offset x="-21" y="1" />
							</Anchor>
						</Anchors>
					</Frame>
					<Button name="OPForwardButton" inherits="OPButtonTemplate" text="Forward">
						<Size x="56" y="20" />
						<Anchors>
							<Anchor point="CENTER" relativeKey="$parent.MovementButtonsAnchor">
								<Offset y="12" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								CheckIfValid(OPLengthBox, true, OPForward)
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Moves you (or the selected object, if you have Move Object enabled in Options) forwards by the amount specified in the Length field in Object Info.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Button>
					<Button name="OPBackwardButton" inherits="OPButtonTemplate" text="Back">
						<Size x="56" y="20" />
						<Anchors>
							<Anchor point="CENTER" relativeKey="$parent.MovementButtonsAnchor">
								<Offset y="-20" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								CheckIfValid(OPLengthBox, true, OPBackward)
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Moves you (or the selected object, if you have Move Object enabled in Options) backwards by the amount specified in the Length field in Object Info.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>

					</Button>
					<Button name="OPLeftButton" inherits="OPButtonTemplate" text="Left">
						<Size x="56" y="20" />
						<Anchors>
							<Anchor point="CENTER" relativeKey="$parent.MovementButtonsAnchor">
								<Offset x="-28" y="-4" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								CheckIfValid(OPWidthBox, true, OPLeft)
							</OnClick>
							<OnEnter>
								if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Moves you (or the selected object, if you have Move Object enabled in Options) left by the amount specified in the Width field in Object Info.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Button>
					<Button name="OPRightButton" inherits="OPButtonTemplate" text="Right">
						<Size x="56" y="20" />
						<Anchors>
							<Anchor point="CENTER" relativeKey="$parent.MovementButtonsAnchor">
								<Offset x="28" y="-4" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								CheckIfValid(OPWidthBox, true, OPRight)
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Moves you (or the selected object, if you have Move Object enabled in Options) right by the amount specified in the Width field in Object Info.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Button>
					<Button name="OPUpButton" inherits="OPButtonTemplate" text="Up">
						<Size x="40" y="16" />
						<Anchors>
							<Anchor point="CENTER" relativeKey="$parent.MovementButtonsAnchor">
								<Offset x="78" y="5" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								CheckIfValid(OPHeightBox, true, OPUp)
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Moves you (or the selected object, if you have Move Object enabled in Options) up by the amount specified in the Height field in Object Info.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Button>
					<Button name="OPDownButton" inherits="OPButtonTemplate" text="Down">
						<Size x="40" y="16" />
						<Anchors>
							<Anchor point="CENTER" relativeKey="$parent.MovementButtonsAnchor">
								<Offset x="78" y="-12" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								CheckIfValid(OPHeightBox, true, OPDown)
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Moves you (or the selected object, if you have Move Object enabled in Options) down by the amount specified in the Height field in Object Info.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Button>
					<Button name="OPTeleporttoObjectButton" inherits="OPButtonTemplate" text="Go To">
						<Size>
							<AbsDimension x="48" y="16" />
						</Size>
						<Anchors>
							<Anchor point="CENTER" relativeKey="$parent.MovementButtonsAnchor">
								<Offset x="78" y="-32" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								OPTeletoObject()
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Teleports you to the selected GameObject.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Button>
					<CheckButton name="OPWASDLayoutToggle">
						<Size x="16" y="16" />
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset x="5" y="-3" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString name="$parentText" font="Fonts\FRIZQT__.TTF" text="Classic|nLayout">
									<Anchors>
										<Anchor point="LEFT" relativePoint="RIGHT">
											<Offset x="0" />
										</Anchor>
									</Anchors>
									<FontHeight val="5" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								self:SetMotionScriptsWhileDisabled(true)
							</OnLoad>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Classic (WASD) Layout", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Change the Movement Buttons to a similar layout to WASD. This is closer to original ObjectMover layout.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if self:GetChecked() == true then
									OPMasterTable.Options["wasdButtonLayout"] = true
								else
									OPMasterTable.Options["wasdButtonLayout"] = false
								end
								OPUpdateMoveButtons()
							</OnClick>
							<OnShow>
								if OPMasterTable.Options["wasdButtonLayout"] == true then self:SetChecked(true) end
							</OnShow>
							<OnDisable>
								_G[self:GetName().."Text"]:SetTextColor(0.66,0.66,0.66)
							</OnDisable>
							<OnEnable>
								_G[self:GetName().."Text"]:SetTextColor(1,1,1)
							</OnEnable>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton>
				</Frames>
			</Frame>
			<Frame name="OPPanel2">
				<Size>
					<AbsDimension x="155" y="203" />
				</Size>
				<Anchors>
					<Anchor point="TOPLEFT">
						<Offset x="10" y="-10" />
					</Anchor>
				</Anchors>
				<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
					<BackgroundInsets>
						<AbsInset left="5" right="5" top="5" bottom="5" />
					</BackgroundInsets>
					<TileSize>
						<AbsValue val="16" />
					</TileSize>
					<EdgeSize>
						<AbsValue val="16" />
					</EdgeSize>
					<Color r="0.5" g="0.5" b="0.5" a="0"/>
					<BorderColor r="0.75" g="0.75" b="0.75"/>
				</Backdrop>
				<Layers>
					<Layer>
						<FontString parentKey="Title" text="Spawn/Move Info" font="Fonts\FRIZQT__.TTF">
							<Size x="145" y="12" />
							<Anchors>
								<Anchor point="TOP">
									<Offset y="-4" />
								</Anchor>
							</Anchors>
							<FontHeight val="12" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<FontString parentKey="SelectedObjName" font="Fonts\FRIZQT__.TTF">
							<Size x="145" y="8" />
							<Anchors>
								<Anchor point="TOP">
									<Offset y="-17" />
								</Anchor>
							</Anchors>
							<FontHeight val="7" />
							<Color r="0.7" g="0.7" b="0.7" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</Layer>
				</Layers>
				<Frames>
					<Button parentKey="InfoButton" inherits="UIPanelInfoButton">
						<Size x="16" y="16" />
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset x="0" y="0" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:RegisterForClicks("LeftButtonUp", "RightButtonUp");
							</OnLoad>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Shows an extended panel with Currently Selected Object Information.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Right Click to reset that panel's size.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if button == "LeftButton" then
									if OPPanelPopout:IsShown() then
										OPPanelPopout:Hide()
									else
										OPPanelPopout:Show()
									end
								elseif button == "RightButton" then
									OPPanelPopout:SetWidth(185)
								end
							</OnClick>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="8" />
						</ButtonText>
						<NormalFont style="GameFontNormalTiny2" />
						<HighlightFont style="GameFontWhiteTiny2" />
						<DisabledFont style="GameFontDisableTiny2" />
					</Button>
					<EditBox name="OPObjectIDBox" autoFocus="false">
						<HighlightColor r="0.5" g="0.5" b="0.5" a="0.75"/>
						<TextInsets>
							<AbsInset left="5" right="0" top="0" bottom="0" />
						</TextInsets>
						<Size x="64" y="23" />
						<Anchors>
							<Anchor point="TOP">
								<Offset x="18" y="-25" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="5" right="5" top="5" bottom="5" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="16" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="16" />
							</EdgeSize>
							<Color r="0.1" g="0.1" b="0.1" a="0.75"/>
							<BorderColor r="0.5" g="0.5" b="0.5"/>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Object ID:">
									<Anchors>
										<Anchor point="RIGHT" relativePoint="LEFT">
											<Offset x="-1" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Set the Object ID you wish to spawn (From 'Spawn' button, Spawn on Move, or Hotkey).", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnEscapePressed>
								self:ClearFocus()
							</OnEscapePressed>
							<OnEnterPressed>
								self:ClearFocus()
							</OnEnterPressed>
							<OnTextChanged>
								if self:GetText() == self:GetText():match("%d+") or self:GetText() == self:GetText():match("%d+%.%d+") or self:GetText() == self:GetText():match("%.%d+") then
									self:SetTextColor(255,255,255,1)
									OPMasterTable.Options["ObjectID"] = self:GetText()
								elseif self:GetText() == "" then
									self:SetTextColor(255,255,255,1)
								elseif self:GetText():find("%a") then
									self:SetText(self:GetText():gsub("%a", ""))
								else
									self:SetTextColor(1,0,0,1)
								end
							</OnTextChanged>
							<OnShow>if OPMasterTable.Options["ObjectID"] ~= nil then self:SetText(OPMasterTable.Options["ObjectID"]) end</OnShow>
						</Scripts>
						<FontString font="Fonts\ARIALN.TTF" text="" indented="true">
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</EditBox>
					<EditBox name="OPLengthBox" autoFocus="false">
						<HighlightColor r="0.5" g="0.5" b="0.5" a="0.75" />
						<TextInsets>
							<AbsInset left="5" right="0" top="0" bottom="0" />
						</TextInsets>
						<Size x="64" y="23" />
						<Anchors>
							<Anchor point="CENTER" relativeTo="OPObjectIDBox">
								<Offset y="-25" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="5" right="5" top="5" bottom="5" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="16" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="16" />
							</EdgeSize>
							<Color r="0.1" g="0.1" b="0.1" a="0.75"/>
							<BorderColor r="0.5" g="0.5" b="0.5"/>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Length (L):">
									<Anchors>
										<Anchor point="RIGHT" relativePoint="LEFT">
											<Offset x="-1" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Set the number to be used for Forward and Backwards Movements.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("May be affected by 'Scale', and the 'Double' or 'Halve' options.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnEscapePressed>
								self:ClearFocus()
							</OnEscapePressed>
							<OnEnterPressed>
								self:ClearFocus()
							</OnEnterPressed>
							<OnTextChanged>
								if self:GetText() == self:GetText():match("%d+") or self:GetText() == self:GetText():match("%d+%.%d+") or self:GetText() == self:GetText():match("%.%d+") then
									self:SetTextColor(255,255,255,1)
									OPMasterTable.Options["Length"] = self:GetText()
								elseif self:GetText() == "" then
									self:SetTextColor(255,255,255,1)
								elseif self:GetText():find("%a") then
									self:SetText(self:GetText():gsub("%a", ""))
								else
									self:SetTextColor(1,0,0,1)
								end
							</OnTextChanged>
							<OnShow>if OPMasterTable.Options["Length"] ~= nil then self:SetText(OPMasterTable.Options["Length"]) end</OnShow>
						</Scripts>
						<FontString font="Fonts\ARIALN.TTF" indented="true">
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</EditBox>
					<EditBox name="OPWidthBox" autoFocus="false">
						<HighlightColor r="0.5" g="0.5" b="0.5" a="0.75"/>
						<TextInsets>
							<AbsInset left="5" right="0" top="0" bottom="0" />
						</TextInsets>
						<Size x="64" y="23" />
						<Anchors>
							<Anchor point="CENTER" relativeTo="OPLengthBox">
								<Offset y="-25" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="5" right="5" top="5" bottom="5" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="16" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="16" />
							</EdgeSize>
							<Color r="0.1" g="0.1" b="0.1" a="0.75"/>
							<BorderColor r="0.5" g="0.5" b="0.5"/>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Width (W):">
									<Anchors>
										<Anchor point="RIGHT" relativePoint="LEFT">
											<Offset x="-1" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Set the number to be used for Left and Right Movements.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("May be affected by 'Scale', and the 'Double' or 'Halve' options.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnEscapePressed>
								self:ClearFocus()
							</OnEscapePressed>
							<OnEnterPressed>
								self:ClearFocus()
							</OnEnterPressed>
							<OnTextChanged>
								if self:GetText() == self:GetText():match("%d+") or self:GetText() == self:GetText():match("%d+%.%d+") or self:GetText() == self:GetText():match("%.%d+") then
									self:SetTextColor(255,255,255,1)
									OPMasterTable.Options["Width"] = self:GetText()
								elseif self:GetText() == "" then
									self:SetTextColor(255,255,255,1)
								elseif self:GetText():find("%a") then
									self:SetText(self:GetText():gsub("%a", ""))
								else
									self:SetTextColor(1,0,0,1)
								end
							</OnTextChanged>
							<OnShow>if OPMasterTable.Options["Width"] ~= nil then self:SetText(OPMasterTable.Options["Width"]) end</OnShow>
						</Scripts>
						<FontString font="Fonts\ARIALN.TTF" indented="true">
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</EditBox>
					<EditBox name="OPHeightBox" autoFocus="false">
						<HighlightColor r="0.5" g="0.5" b="0.5" a="0.75"/>
						<TextInsets>
							<AbsInset left="5" right="0" top="0" bottom="0" />
						</TextInsets>
						<Size x="64" y="23" />
						<Anchors>
							<Anchor point="CENTER" relativeTo="OPWidthBox">
								<Offset y="-25" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="5" right="5" top="5" bottom="5" />
							</BackgroundInsets>
							<TileSize val="16" />
							<EdgeSize val="16" />
							<Color r="0.1" g="0.1" b="0.1" a="0.75"/>
							<BorderColor r="0.5" g="0.5" b="0.5"/>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Height (H):">
									<Anchors>
										<Anchor point="RIGHT" relativePoint="LEFT">
											<Offset x="-1" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Set the number to be used for Up and Down Movements.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("May be affected by 'Scale', and the 'Double' or 'Halve' options.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnEscapePressed>
								self:ClearFocus()
							</OnEscapePressed>
							<OnEnterPressed>
								self:ClearFocus()
							</OnEnterPressed>
							<OnTextChanged>
								if self:GetText() == self:GetText():match("%d+") or self:GetText() == self:GetText():match("%d+%.%d+") or self:GetText() == self:GetText():match("%.%d+") then
									self:SetTextColor(255,255,255,1)
									OPMasterTable.Options["Height"] = self:GetText()
								elseif self:GetText() == "" then
									self:SetTextColor(255,255,255,1)
								elseif self:GetText():find("%a") then
									self:SetText(self:GetText():gsub("%a", ""))
								else
									self:SetTextColor(1,0,0,1)
								end
							</OnTextChanged>
							<OnShow>if OPMasterTable.Options["Height"] ~= nil then self:SetText(OPMasterTable.Options["Height"]) end</OnShow>
						</Scripts>
						<FontString font="Fonts\ARIALN.TTF" indented="true">
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</EditBox>
					<EditBox name="OPScaleBox" autoFocus="false">
						<HighlightColor r="0.5" g="0.5" b="0.5" a="0.75" />
						<TextInsets>
							<AbsInset left="5" right="0" top="0" bottom="0" />
						</TextInsets>
						<Size x="64" y="23" />
						<Anchors>
							<Anchor point="CENTER" relativeTo="OPHeightBox">
								<Offset y="-25" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="5" right="5" top="5" bottom="5" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="16" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="16" />
							</EdgeSize>
							<Color r="0.1" g="0.1" b="0.1" a="0.75"/>
							<BorderColor r="0.5" g="0.5" b="0.5"/>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Scale:">
									<Anchors>
										<Anchor point="RIGHT" relativePoint="LEFT">
											<Offset x="-1" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Set the number to scale the object to when spawned by ObjectMover.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Also modifies the Length, Width, and Height parameters by multiplying them by the scale (checkbox must be enabled for this to do anything).",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnEnterPressed>
								self:ClearFocus()
							</OnEnterPressed>
							<OnEscapePressed>
								self:ClearFocus()
							</OnEscapePressed>
							<OnTextChanged>
								if self:GetText() == self:GetText():match("%d+") or self:GetText() == self:GetText():match("%d+%.%d+") or self:GetText() == self:GetText():match("%.%d+") then
									ScaleObject:Enable()
									self:SetTextColor(255,255,255,1)
									OPMasterTable.Options["Scale"] = self:GetText()
								elseif self:GetText() == "" then
									self:SetTextColor(255,255,255,1)
									ScaleObject:Disable()
								elseif self:GetText():find("%a") then
									self:SetText(self:GetText():gsub("%a", ""))
								else
									self:SetTextColor(1,0,0,1)
									ScaleObject:Disable()
								end
							</OnTextChanged>
							<OnEditFocusLost>
								OPScaleObject(OPMasterTable.Options["Scale"])
							</OnEditFocusLost>
							<OnShow>if OPMasterTable.Options["Scale"] ~= nil then self:SetText(OPMasterTable.Options["Scale"]) end</OnShow>
						</Scripts>
						<FontString font="Fonts\ARIALN.TTF" indented="true">
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</EditBox>
					<CheckButton name="ScaleObject">
						<Size x="24" y="24" />
						<Anchors>
							<Anchor point="RIGHT" relativeTo="OPScaleBox" relativePoint="LEFT">
								<Offset x="-35" y="0"/>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Enable Scale Option", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("All dimensions (Length, Width, Height) will be multiplied by the defined scale, and objects spawned by ObjectMover will be automatically set to that scale.",1,1,1,true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("If disabled, Scale will have no effect anywhere.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if self:GetChecked() == true then
									OPMasterTable.Options["ScaleTog"] = true
								else
									OPMasterTable.Options["ScaleTog"] = false
								end
							</OnClick>
							<OnShow>if OPMasterTable.Options["ScaleTog"] == true then self:SetChecked(true) end</OnShow>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton>
					<Button name="OPGetObjectIDButton" inherits="UIPanelButtonTemplate" text="Get|nID">
						<Size x="24" y="22" />
						<Anchors>
							<Anchor point="left" relativeTo="OPObjectIDBox" relativePoint="right">
								<Offset x="-2" y="1" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
							self:RegisterForClicks("LeftButtonUp","RightButtonUp")
							</OnLoad>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Sets the Object ID to the currently selected Object.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Right Click to Grab Selected Object ID &amp; auto-set the detected dimensions (m2 only).",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								OPGetObject(button)
							</OnClick>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="8" />
						</ButtonText>
						<NormalFont style="GameFontNormalTiny2" />
						<HighlightFont style="GameFontWhiteTiny2" />
						<DisabledFont style="GameFontDisableTiny2" />
					</Button>
					<Button name="OPLengthDoubleButton" inherits="UIPanelButtonTemplate" text="x2">
						<Size x="24" y="11" />
						<Anchors>
							<Anchor point="topleft" relativeTo="OPLengthBox" relativePoint="topright">
								<Offset x="-2" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Doubles the current Length value", nil, nil, nil, nil, false)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Shift-Click to affect all dimensions at once.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if IsShiftKeyDown() then 
									OPUpdateAllDimensions(2)
								else
									OPLengthBox:SetText(OPLengthBox:GetText()*2)
								end
							</OnClick>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="8" />
						</ButtonText>
						<NormalFont style="GameFontNormalTiny2" />
						<HighlightFont style="GameFontWhiteTiny2" />
						<DisabledFont style="GameFontDisableTiny2" />
					</Button>
					<Button name="OPLengthHalfButton" inherits="UIPanelButtonTemplate" text="1/2">
						<Size x="24" y="11" />
						<Anchors>
							<Anchor point="bottomleft" relativeTo="OPLengthBox" relativePoint="bottomright">
								<Offset x="-2" y="1" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Halves the current Length value", nil, nil, nil, nil, false)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Shift-Click to affect all dimensions at once.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if IsShiftKeyDown() then 
									OPUpdateAllDimensions(0.5)
								else
									OPLengthBox:SetText(OPLengthBox:GetText()/2)
								end
							</OnClick>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="8" />
						</ButtonText>
						<NormalFont style="GameFontNormalTiny2" />
						<HighlightFont style="GameFontWhiteTiny2" />
						<DisabledFont style="GameFontDisableTiny2" />
					</Button>
					<Button name="OPWidthDoubleButton" inherits="UIPanelButtonTemplate" text="x2">
						<Size x="24" y="11" />
						<Anchors>
							<Anchor point="topleft" relativeTo="OPWidthBox" relativePoint="topright">
								<Offset x="-2" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Doubles the current Width value", nil, nil, nil, nil, false)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Shift-Click to affect all dimensions at once.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if IsShiftKeyDown() then 
									OPUpdateAllDimensions(2)
								else
									OPWidthBox:SetText(OPWidthBox:GetText()*2)
								end
							</OnClick>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="8" />
						</ButtonText>
						<NormalFont style="GameFontNormalTiny2" />
						<HighlightFont style="GameFontWhiteTiny2" />
						<DisabledFont style="GameFontDisableTiny2" />
					</Button>
					<Button name="OPWidthHalfButton" inherits="UIPanelButtonTemplate" text="1/2">
						<Size x="24" y="11" />
						<Anchors>
							<Anchor point="bottomleft" relativeTo="OPWidthBox" relativePoint="bottomright">
								<Offset x="-2" y="1" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Halves the current Width value", nil, nil, nil, nil, false)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Shift-Click to affect all dimensions at once.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if IsShiftKeyDown() then 
									OPUpdateAllDimensions(0.5)
								else
									OPWidthBox:SetText(OPWidthBox:GetText()/2)
								end
							</OnClick>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="8" />
						</ButtonText>
						<NormalFont style="GameFontNormalTiny2" />
						<HighlightFont style="GameFontWhiteTiny2" />
						<DisabledFont style="GameFontDisableTiny2" />
					</Button>
					<Button name="OPHeightDoubleButton" inherits="UIPanelButtonTemplate" text="x2">
						<Size x="24" y="11" />
						<Anchors>
							<Anchor point="topleft" relativeTo="OPHeightBox" relativePoint="topright">
								<Offset x="-2" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Doubles the current Height value", nil, nil, nil, nil, false)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Shift-Click to affect all dimensions at once.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if IsShiftKeyDown() then 
									OPUpdateAllDimensions(2)
								else
									OPHeightBox:SetText(OPHeightBox:GetText()*2)
								end
							</OnClick>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="8" />
						</ButtonText>
						<NormalFont style="GameFontNormalTiny2" />
						<HighlightFont style="GameFontWhiteTiny2" />
						<DisabledFont style="GameFontDisableTiny2" />
					</Button>
					<Button name="OPHeightHalfButton" inherits="UIPanelButtonTemplate" text="1/2">
						<Size x="24" y="11" />
						<Anchors>
							<Anchor point="bottomleft" relativeTo="OPHeightBox" relativePoint="bottomright">
								<Offset x="-2" y="1" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Halves the current Height value", nil, nil, nil, nil, false)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Shift-Click to affect all dimensions at once.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if IsShiftKeyDown() then 
									OPUpdateAllDimensions(0.5)
								else
									OPHeightBox:SetText(OPHeightBox:GetText()/2)
								end
							</OnClick>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="8" />
						</ButtonText>
						<NormalFont style="GameFontNormalTiny2" />
						<HighlightFont style="GameFontWhiteTiny2" />
						<DisabledFont style="GameFontDisableTiny2" />
					</Button>
					<Button name="OPScaleDoubleButton" inherits="UIPanelButtonTemplate" text="x2">
						<Size x="24" y="11" />
						<Anchors>
							<Anchor point="topleft" relativeTo="OPScaleBox" relativePoint="topright">
								<Offset x="-2" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Doubles the current Scale value", nil, nil, nil, nil, false)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								OPScaleBox:SetText(OPScaleBox:GetText()*2)
							</OnClick>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="8" />
						</ButtonText>
						<NormalFont style="GameFontNormalTiny2" />
						<HighlightFont style="GameFontWhiteTiny2" />
						<DisabledFont style="GameFontDisableTiny2" />
					</Button>
					<Button name="OPScaleHalfButton" inherits="UIPanelButtonTemplate" text="1/2">
						<Size x="24" y="11" />
						<Anchors>
							<Anchor point="bottomleft" relativeTo="OPScaleBox" relativePoint="bottomright">
								<Offset x="-2" y="1" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Halves the current Scale value", nil, nil, nil, nil, false)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								OPScaleBox:SetText(OPScaleBox:GetText()/2)
							</OnClick>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="8" />
						</ButtonText>
						<NormalFont style="GameFontNormalTiny2" />
						<HighlightFont style="GameFontWhiteTiny2" />
						<DisabledFont style="GameFontDisableTiny2" />
					</Button>
					<CheckButton name="OPParamAutoUpdateButton">
						<Size x="24" y="24" />
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeTo="OPScaleHalfButton">
								<Offset x="0" y="-2" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="Auto|n|rUpdate">
									<Anchors>
										<Anchor point="RIGHT" relativePoint="LEFT">
											<Offset x="0" />
										</Anchor>
									</Anchors>
									<FontHeight val="9" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Automatically Updates the Object Parametes when Selecting an Object.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("If the selected object is an M2, we will try and auto-set Length, Width, and Height.",1,1,1,true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if self:GetChecked() == true then
									OPMasterTable.Options["autoUpdateParams"] = true
									--self:SetChecked(false)
								else
									OPMasterTable.Options["autoUpdateParams"] = false
									--self:SetChecked(true)
								end
							</OnClick>
							<OnShow>if OPMasterTable.Options["autoUpdateParams"] then self:SetChecked(true) end</OnShow>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton>
					<Button name="OPSpawnButton" inherits="OPButtonTemplate" text="Spawn">
						<Size x="56" y="16" />
						<Anchors>
							<Anchor point="BOTTOMRIGHT">
								<Offset x="-10" y="11" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								OPSpawn()
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Spawns a GameObject using the ID from the Object ID field in Object Info.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Button>
					<Button name="OPParamSaveButton" inherits="UIPanelButtonTemplate" text="Save">
						<Size x="56" y="16" />
						<Anchors>
							<Anchor point="BOTTOMLEFT">
								<Offset x="14" y="34" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								OPShowParamSaveMenu();
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Opens up a new dialogue to save the current Object Info (ID, Length, Width, Height, and Scale) for quickly loading later.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Leaving an option blank, or as '0', will cause it to not load (i.e., leaving the ObjectID blank will cause it to not change your current ObjectID when loaded).",1,1,1,true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<ButtonText name="$parentText" />
						<NormalFont style="GameFontNormalSmall" />
						<HighlightFont style="GameFontHighlightSmall" />
						<DisabledFont style="GameFontDisableSmall" />
					</Button>
				</Frames>
			</Frame>
			<Frame name="OPPanel3">
				<Size x="180" y="113" />
				<Anchors>
					<Anchor point="TOPRIGHT">
						<Offset x="-10" y="-100" />
					</Anchor>
				</Anchors>
				<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
					<BackgroundInsets>
						<AbsInset left="5" right="5" top="5" bottom="5" />
					</BackgroundInsets>
					<TileSize>
						<AbsValue val="16" />
					</TileSize>
					<EdgeSize>
						<AbsValue val="16" />
					</EdgeSize>
					<Color r="0.5" g="0.5" b="0.5" a="0"/>
					<BorderColor r="0.75" g="0.75" b="0.75"/>
				</Backdrop>
				<Layers>
					<Layer>
						<FontString parentKey="Title" text="Options" font="Fonts\FRIZQT__.TTF">
							<Size x="145" y="12" />
							<Anchors>
								<Anchor point="TOP">
									<Offset y="-4" />
								</Anchor>
							</Anchors>
							<FontHeight val="12" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</Layer>
				</Layers>
				<Frames>
					<CheckButton name="OPMovePlayerInstead">
						<Size x="24" y="24" />
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset x="5" y="-25" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="Move|nPlayer">
									<Anchors>
										<Anchor point="CENTER" relativePoint="RIGHT">
											<Offset x="20" />
										</Anchor>
									</Anchors>
									<FontHeight val="9" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>self:SetMotionScriptsWhileDisabled(true)</OnLoad>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Moves your Player Character instead of the selected Object or Object Group.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if self:GetChecked() == true then
									OPMasterTable.Options["MovePlayer"] = true
									RelativeToPlayerToggle:Disable()
									SpawnonMoveButton:Enable()
								else
									OPMasterTable.Options["MovePlayer"] = false
									RelativeToPlayerToggle:Enable()
									SpawnonMoveButton:Disable()
								end
							</OnClick>
							<OnShow>if OPMasterTable.Options["MovePlayer"] == true then self:SetChecked(true) end</OnShow>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton>
					<CheckButton name="SpawnonMoveButton">
						<Size>
							<AbsDimension x="24" y="24" />
						</Size>
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeTo="OPMovePlayerInstead">
								<Offset y="0" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="Spawn|non Move">
									<Anchors>
										<Anchor point="CENTER" relativePoint="Right">
											<Offset x="20" />
										</Anchor>
									</Anchors>
									<FontHeight val="9" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								self:SetMotionScriptsWhileDisabled(true)
							</OnLoad>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Spawn an Object at your location every time you move using ObjectMover.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Only works in 'Move Player' mode.",1,1,1,true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if self:GetChecked() == true then
									OPMasterTable.Options["SpawnOnMove"] = true
								else
									OPMasterTable.Options["SpawnOnMove"] = false
								end
							</OnClick>
							<OnShow>
								if OPMasterTable.Options["SpawnOnMove"] == true then self:SetChecked(true) end 
								if OPMovePlayerInstead:GetChecked() then
									self:Enable()
								else
									self:Disable()
								end
							</OnShow>
							<OnDisable>
								self.Text:SetTextColor(0.66,0.66,0.66)
							</OnDisable>
							<OnEnable>
								self.Text:SetTextColor(1,1,1)
							</OnEnable>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton>
					<CheckButton name="RelativeToPlayerToggle">
						<Size x="24" y="24" />
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeTo="SpawnonMoveButton">
								<Offset y="0" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="Move|nRelative">
									<Anchors>
										<Anchor point="CENTER" relativePoint="Right">
											<Offset x="20" />
										</Anchor>
									</Anchors>
									<FontHeight val="9" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								self:SetMotionScriptsWhileDisabled(true)
							</OnLoad>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Moves the Object relative to the direction you are facing instead of where the object is facing.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Example: If the object is facing East, but you are facing North, moving forward will move the object North, not East.",1,1,1,true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Does not apply when using 'Move Player' mode, obviously.",1,1,1,true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if self:GetChecked() == true then
									OPMasterTable.Options["RelativeToPlayer"] = true
								else
									OPMasterTable.Options["RelativeToPlayer"] = false
								end
							</OnClick>
							<OnShow>
								if OPMasterTable.Options["RelativeToPlayer"] == true then self:SetChecked(true) end
								if OPMovePlayerInstead:GetChecked() then
									self:Disable()
								else
									self:Enable()
								end
							</OnShow>
							<OnDisable>
								self.Text:SetTextColor(0.66,0.66,0.66)
							</OnDisable>
							<OnEnable>
								self.Text:SetTextColor(1,1,1)
							</OnEnable>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton>
					<CheckButton name="OPAutoShowToggle">
						<Size x="24" y="24" />
						<Anchors>
							<Anchor point="TOPRIGHT">
								<Offset x="-5" y="-25" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString name="$parentText" font="Fonts\FRIZQT__.TTF" text="Auto Show">
									<Anchors>
										<Anchor point="RIGHT">
											<Offset x="-25" />
										</Anchor>
									</Anchors>
									<FontHeight val="9" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								self:SetMotionScriptsWhileDisabled(true)
							</OnLoad>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Auto Show", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Automatically Show ObjectMover when you load in.",1,1,1,true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if self:GetChecked() == true then
									OPMasterTable.Options["autoShow"] = true
								else
									OPMasterTable.Options["autoShow"] = false
								end
							</OnClick>
							<OnShow>
								if OPMasterTable.Options["autoShow"] == true then self:SetChecked(true) end
							</OnShow>
							<OnDisable>
								_G[self:GetName().."Text"]:SetTextColor(0.66,0.66,0.66)
							</OnDisable>
							<OnEnable>
								_G[self:GetName().."Text"]:SetTextColor(1,1,1)
							</OnEnable>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton>
					<CheckButton name="OPFadePanelToggle">
						<Size x="24" y="24" />
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeTo="OPAutoShowToggle">
								<Offset y="0" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString name="$parentText" font="Fonts\FRIZQT__.TTF" text="Fade Out">
									<Anchors>
										<Anchor point="RIGHT">
											<Offset x="-25" />
										</Anchor>
									</Anchors>
									<FontHeight val="9" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								self:SetMotionScriptsWhileDisabled(true)
							</OnLoad>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Fade Panel", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("When not moused over, ObjectMover will fade into the background to increase visibility.",1,1,1,true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if self:GetChecked() == true then
									OPMasterTable.Options["fadePanel"] = true
								else
									OPMasterTable.Options["fadePanel"] = false
								end
							</OnClick>
							<OnShow>
								if OPMasterTable.Options["fadePanel"] == true then self:SetChecked(true) end
							</OnShow>
							<OnDisable>
								_G[self:GetName().."Text"]:SetTextColor(0.66,0.66,0.66)
							</OnDisable>
							<OnEnable>
								_G[self:GetName().."Text"]:SetTextColor(1,1,1)
							</OnEnable>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton>
					<CheckButton name="OPShowMessagesToggle">
						<Size x="24" y="24" />
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeTo="OPFadePanelToggle">
								<Offset y="0" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString name="ShowMessagesText" font="Fonts\FRIZQT__.TTF" text="Messages">
									<Anchors>
										<Anchor point="CENTER" relativePoint="LEFT">
											<Offset x="-22" />
										</Anchor>
									</Anchors>
									<FontHeight val="9" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Toggles filtering of server reply messages for 'object rotated', 'object moved', ect.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton> 
					<Button parentKey="FullOptionsButton" inherits="UIPanelButtonTemplate" text="More">
						<Size x="32" y="16" />
						<Anchors>
							<Anchor point="TOPRIGHT">
								<Offset x="-5" y="-5" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								if not OPNewOptionsFrame:IsShown() then 
									OPNewOptionsFrame:Show();
									PanelTemplates_SetTab(OPNewOptionsFrame, 1);
									OPNewOptionsFrame.MainArea.Changelog:Hide();
									OPNewOptionsFrame.MainArea.Help:Hide();
									OPNewOptionsFrame.MainArea.NewOptions:Show(); 
								elseif OPNewOptionsFrame.MainArea.NewOptions:IsShown() == false then
									PanelTemplates_SetTab(OPNewOptionsFrame, 1);
									OPNewOptionsFrame.MainArea.Changelog:Hide();
									OPNewOptionsFrame.MainArea.Help:Hide();
									OPNewOptionsFrame.MainArea.NewOptions:Show(); 
								else
									OPNewOptionsFrame:Hide()
								end
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Show more options.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>							
						</Scripts>
						<NormalFont style="GameFontNormalTiny2" />
						<HighlightFont style="GameFontWhiteTiny2" />
						<DisabledFont style="GameFontDisableTiny2" />
					</Button>
				</Frames>
			</Frame>
			<Frame name="OPPanel4Overlay" hidden="false">
				<Size x="335" y="132" />
				<Anchors>
					<Anchor point="BOTTOMLEFT">
						<Offset x="10" y="10" />
					</Anchor>
				</Anchors>
				<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
					<BackgroundInsets>
						<AbsInset left="5" right="5" top="5" bottom="5" />
					</BackgroundInsets>
					<TileSize>
						<AbsValue val="16" />
					</TileSize>
					<EdgeSize>
						<AbsValue val="16" />
					</EdgeSize>
					<Color r="0.5" g="0.5" b="0.5" a="0"/>
					<BorderColor r="0.75" g="0.75" b="0.75"/>
				</Backdrop>
				<Frames>
					<Slider name="OPOverlaySliderR" orientation="HORIZONTAL" enableMouse="true" defaultValue="100" minValue="0" maxValue="100" valueStep="5" ObeyStepOnDrag="true">
						<Size>
							<AbsDimension x="175" y="14" />
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset x="11" y="-20" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="8" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="8" />
							</EdgeSize>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString name="$parentTitle" font="Fonts\FRIZQT__.TTF" text="Red">
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset x="10" y="10" />
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="0.75" b="0.75" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentLabel" font="Fonts\FRIZQT__.TTF" text="R:">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="TOPRIGHT">
											<Offset x="-35" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="1" g="0.75" b="0.75" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="100">
									<Anchors>
										<Anchor relativeTo="$parentLabel" point="LEFT" relativePoint="RIGHT">
											<Offset x="5" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="1" g="0.75" b="0.75" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<ThumbTexture name="$parentThumb" file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
							<Size>
								<AbsDimension x="24" y="24" />
							</Size>
						</ThumbTexture>
						<Scripts>
							<OnMouseDown>
								if self.dragEndTimer then
									self.dragEndTimer:Cancel()
								end
								self.sliderDragChange = true
								self.isDragging = true
								OPOverlayDragging = true
							</OnMouseDown>
							<OnMouseUp>
								self.isDragging = false
								self.dragEndTimer = C_Timer.NewTimer(0.2,function()
									if not self.isMousedOver then
										self.sliderDragChange = false
									end
									OPOverlayDragging = false
								end)
							</OnMouseUp>
							<OnValueChanged function="OPOverlaySlider_OnValueChanged"/>
							<OnLoad></OnLoad>
							<OnEnter>
								self.sliderDragChange = true
								self.isMousedOver = true
								if OPMasterTable.Options["showTooltips"] == true then
									GameTooltip:SetOwner(self, "ANCHOR_LEFT")
									self.Timer = C_Timer.NewTimer(0.5,function()
										GameTooltip:SetText("Drag to change current Red Overlay on an Object", nil, nil, nil, nil, true)
										GameTooltip:Show()
									end)
								end
							</OnEnter>
							<OnLeave>
								self.isMousedOver = false
								if not self.isDragging then
									self.sliderDragChange = false
								end
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Slider>
					<Slider name="OPOverlaySliderG" orientation="HORIZONTAL" enableMouse="true" defaultValue="100" minValue="0" maxValue="100" valueStep="5" ObeyStepOnDrag="true">
						<Size>
							<AbsDimension x="175" y="14" />
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset x="11" y="-47" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="8" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="8" />
							</EdgeSize>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString name="$parentTitle" font="Fonts\FRIZQT__.TTF" text="Green">
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset x="10" y="10" />
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="0.75" g="1" b="0.75" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentLabel" font="Fonts\FRIZQT__.TTF" text="G:">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="TOPRIGHT">
											<Offset x="-35" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="0.75" g="1" b="0.75" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="100">
									<Anchors>
										<Anchor relativeTo="$parentLabel" point="LEFT" relativePoint="RIGHT">
											<Offset x="5" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="0.75" g="1" b="0.75" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<ThumbTexture name="$parentThumb" file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
							<Size>
								<AbsDimension x="24" y="24" />
							</Size>
						</ThumbTexture>
						<Scripts>
							<OnMouseDown>
								if self.dragEndTimer then
									self.dragEndTimer:Cancel()
								end
								self.sliderDragChange = true
								self.isDragging = true
								OPOverlayDragging = true
							</OnMouseDown>
							<OnMouseUp>
								self.isDragging = false
								self.dragEndTimer = C_Timer.NewTimer(0.2,function()
									if not self.isMousedOver then
										self.sliderDragChange = false
									end
									OPOverlayDragging = false
								end)
							</OnMouseUp>
							<OnValueChanged function="OPOverlaySlider_OnValueChanged"/>
							<OnLoad></OnLoad>
							<OnEnter>
								self.sliderDragChange = true
								self.isMousedOver = true
								if OPMasterTable.Options["showTooltips"] == true then
									GameTooltip:SetOwner(self, "ANCHOR_LEFT")
									self.Timer = C_Timer.NewTimer(0.5,function()
										GameTooltip:SetText("Drag to change current Green Overlay on an Object", nil, nil, nil, nil, true)
										GameTooltip:Show()
									end)
								end
							</OnEnter>
							<OnLeave>
								self.isMousedOver = false
								if not self.isDragging then
									self.sliderDragChange = false
								end
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Slider>
					<Slider name="OPOverlaySliderB" orientation="HORIZONTAL" enableMouse="true" defaultValue="100" minValue="0" maxValue="100" valueStep="5" ObeyStepOnDrag="true">
						<Size>
							<AbsDimension x="175" y="14" />
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset x="11" y="-74" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="8" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="8" />
							</EdgeSize>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString name="$parentTitle" font="Fonts\FRIZQT__.TTF" text="Blue">
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset x="10" y="10" />
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="0.75" g="0.75" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentLabel" font="Fonts\FRIZQT__.TTF" text="B:">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="TOPRIGHT">
											<Offset x="-35" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="0.75" g="0.75" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="100">
									<Anchors>
										<Anchor relativeTo="$parentLabel" point="LEFT" relativePoint="RIGHT">
											<Offset x="5" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="0.75" g="0.75" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<ThumbTexture name="$parentThumb" file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
							<Size>
								<AbsDimension x="24" y="24" />
							</Size>
						</ThumbTexture>
						<Scripts>
							<OnMouseDown>
								if self.dragEndTimer then
									self.dragEndTimer:Cancel()
								end
								self.sliderDragChange = true
								self.isDragging = true
								OPOverlayDragging = true
							</OnMouseDown>
							<OnMouseUp>
								self.isDragging = false
								self.dragEndTimer = C_Timer.NewTimer(0.2,function()
									if not self.isMousedOver then
										self.sliderDragChange = false
									end
									OPOverlayDragging = false
								end)
							</OnMouseUp>
							<OnValueChanged function="OPOverlaySlider_OnValueChanged"/>
							<OnLoad></OnLoad>
							<OnEnter>
								self.sliderDragChange = true
								self.isMousedOver = true
								if OPMasterTable.Options["showTooltips"] == true then
									GameTooltip:SetOwner(self, "ANCHOR_LEFT")
									self.Timer = C_Timer.NewTimer(0.5,function()
										GameTooltip:SetText("Drag to change current Blue Overlay on an Object", nil, nil, nil, nil, true)
										GameTooltip:Show()
									end)
								end
							</OnEnter>
							<OnLeave>
								self.isMousedOver = false
								if not self.isDragging then
									self.sliderDragChange = false
								end
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Slider>
					<Slider name="OPOverlaySliderT" orientation="HORIZONTAL" enableMouse="true" defaultValue="0" minValue="0" maxValue="100" valueStep="20" ObeyStepOnDrag="true">
						<Size>
							<AbsDimension x="175" y="14" />
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset x="11" y="-101" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="8" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="8" />
							</EdgeSize>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString name="$parentTitle" font="Fonts\FRIZQT__.TTF" text="Transparency">
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset x="10" y="10" />
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentLow" font="Fonts\FRIZQT__.TTF" text="0">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" />
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentHigh" font="Fonts\FRIZQT__.TTF" text="100">
									<Anchors>
										<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT" />
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentLabel" font="Fonts\FRIZQT__.TTF" text="T:">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="TOPRIGHT">
											<Offset x="-35" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="0">
									<Anchors>
										<Anchor relativeTo="$parentLabel" point="LEFT" relativePoint="RIGHT">
											<Offset x="5" />
										</Anchor>
									</Anchors>
									<FontHeight val="10" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<ThumbTexture name="$parentThumb" file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
							<Size>
								<AbsDimension x="24" y="24" />
							</Size>
						</ThumbTexture>
						<Scripts>
							<OnMouseDown>
								if self.dragEndTimer then
									self.dragEndTimer:Cancel()
								end
								self.sliderDragChange = true
								self.isDragging = true
								OPOverlayDragging = true
							</OnMouseDown>
							<OnMouseUp>
								self.isDragging = false
								self.dragEndTimer = C_Timer.NewTimer(0.2,function()
									if not self.isMousedOver then
										self.sliderDragChange = false
									end
									OPOverlayDragging = false
								end)
							</OnMouseUp>
							<OnValueChanged function="OPOverlaySlider_OnValueChanged"/>
							<OnLoad></OnLoad>
							<OnEnter>
								self.sliderDragChange = true
								self.isMousedOver = true
								if OPMasterTable.Options["showTooltips"] == true then
									GameTooltip:SetOwner(self, "ANCHOR_LEFT")
									self.Timer = C_Timer.NewTimer(0.5,function()
										GameTooltip:SetText("Drag to change current Transparency on an Object", nil, nil, nil, nil, true)
										GameTooltip:Show()
									end)
								end
							</OnEnter>
							<OnLeave>
								self.isMousedOver = false
								if not self.isDragging then
									self.sliderDragChange = false
								end
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Slider>
					<Slider name="OPOverlaySliderS" orientation="VERTICAL" enableMouse="true" defaultValue="100" minValue="0" maxValue="100" valueStep="20" ObeyStepOnDrag="true">
						<Size>
							<AbsDimension x="14" y="100" />
						</Size>
						<Anchors>
							<Anchor point="TOPRIGHT">
								<Offset x="-115" y="-18" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="8" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="8" />
							</EdgeSize>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString name="$parentTitle" font="Fonts\FRIZQT__.TTF" text="s|na|nt|nu|nr|na|nt|ni|no|nn">
									<Anchors>
										<Anchor point="RIGHT" relativePoint="LEFT">
											<Offset x="0" y="0" />
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="8" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentLow" font="Fonts\FRIZQT__.TTF" text="100">
									<Anchors>
										<Anchor point="BOTTOM" relativePoint="TOP" />
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentHigh" font="Fonts\FRIZQT__.TTF" text="0">
									<Anchors>
										<Anchor point="TOP" relativePoint="BOTTOM" />
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentLabel" font="Fonts\FRIZQT__.TTF" text="S:">
									<Anchors>
										<Anchor point="LEFT" relativePoint="RIGHT">
											<Offset x="5" />
										</Anchor>
									</Anchors>
									<FontHeight val="8" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="0">
									<Anchors>
										<Anchor point="LEFT" relativePoint="RIGHT">
											<Offset x="15" />
										</Anchor>
									</Anchors>
									<FontHeight val="8" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<ThumbTexture name="$parentThumb" file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
							<Size>
								<AbsDimension x="24" y="24" />
							</Size>
						</ThumbTexture>
						<Scripts>
							<OnMouseDown>
								if self.dragEndTimer then
									self.dragEndTimer:Cancel()
								end
								self.sliderDragChange = true
								self.isDragging = true
								OPOverlayDragging = true
							</OnMouseDown>
							<OnMouseUp>
								self.isDragging = false
								self.dragEndTimer = C_Timer.NewTimer(0.2,function()
									if not self.isMousedOver then
										self.sliderDragChange = false
									end
									OPOverlayDragging = false
								end)
							</OnMouseUp>
							<OnValueChanged function="OPOverlaySlider_OnValueChanged"/>
							<OnLoad></OnLoad>
							<OnEnter>
								self.sliderDragChange = true
								self.isMousedOver = true
								if OPMasterTable.Options["showTooltips"] == true then
									GameTooltip:SetOwner(self, "ANCHOR_LEFT")
									self.Timer = C_Timer.NewTimer(0.5,function()
										GameTooltip:SetText("Drag to change color overlay saturation on an Object", nil, nil, nil, nil, true)
										GameTooltip:AddLine(" ")
										GameTooltip:AddLine("Setting the Saturation to 0 will use |cffFFAAAATint|r instead of |cffFFAAAAOverlay|r.",1,1,1,true)
										GameTooltip:Show()
									end)
								end
							</OnEnter>
							<OnLeave>
								self.isMousedOver = false
								if not self.isDragging then
									self.sliderDragChange = false
								end
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Slider>
					<Button name="OPOverlayColorWheelButton" inherits="UIPanelButtonTemplate" text="COLOR_PICKER">
						<Size x="72" y="24" />
						<Anchors>
							<Anchor point="TOPRIGHT">
								<Offset x="-10" y="-10" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								r, g, b, a = OPOverlaySliderR:GetValue()/100,OPOverlaySliderG:GetValue()/100,OPOverlaySliderB:GetValue()/100,OPOverlaySliderS:GetValue()/100
								ColorPickerFrame:SetColorRGB(r, g, b)
								ColorPickerFrame.hasOpacity, ColorPickerFrame.opacity = true, a
								ColorPickerFrame.previousValues = {r,g,b,a};
								ColorPickerFrame.func, ColorPickerFrame.cancelFunc = OPUpdateOverlays, OPUpdateOverlays
								
								ColorPickerFrame.opacityFunc = (function()
									OPOverlaySliderS:SetValue(OpacitySliderFrame:GetValue()*100)
								end)
								ColorPickerOkayButton:HookScript("OnClick", OPUpdateOverlaysApply)
								OPOverlayIsControllingColorPicker = true
								ColorPickerFrame:Hide()
								ColorPickerFrame:Show()
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Open the Color Wheel to Select a Color.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="10" />
						</ButtonText>
						<NormalFont style="GameFontNormalSmall" />
						<HighlightFont style="GameFontHighlightSmall" />
						<DisabledFont style="GameFontDisableSmall" />
					</Button>
					<Button name="OPOverlayApplyButton" inherits="UIPanelButtonTemplate" text="APPLY">
						<Size x="72" y="24" />
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeTo="OPOverlayColorWheelButton">
								<Offset x="0" y="-5" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:RegisterForClicks("LeftButtonUp", "RightButtonUp", "LeftButtonDown", "RightButtonDown");
							</OnLoad>
							<OnClick>
								if not down then
									if button == "LeftButton" then
										OPOverlayObject();
									elseif button == "RightButton" then
										OPResetOverlay(true);
									end
								end
							</OnClick>
							<OnMouseDown>
								if button == "LeftButton" then
									self:SetText(APPLY)
								elseif button == "RightButton" then
									self:SetText(REMOVE)
								end
							</OnMouseDown>
							<OnMouseUp>
								self:SetText(APPLY)
							</OnMouseUp>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Applies the current Overlay Settings to the selected object.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Right Click to Reset/Remove the object's Overlay.",1,1,1,true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="10" />
						</ButtonText>
						<NormalFont style="GameFontNormalSmall" />
						<HighlightFont style="GameFontHighlightSmall" />
						<DisabledFont style="GameFontDisableSmall" />
					</Button>
					<Button name="OPOverlaySpellButton" inherits="UIPanelButtonTemplate" text="Spell">
						<Size x="72" y="24" />
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeTo="OPOverlayApplyButton">
								<Offset x="0" y="-5" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:RegisterForClicks("LeftButtonUp", "RightButtonUp");
							</OnLoad>
							<OnClick>
								OPSpellButtonFunc(button)
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Opens a Dialogue Box to Apply a Spell to the Selected Object.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Right Click to Remove the Current Spell.",1,1,1,true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<ButtonText parentKey="Text">
							<FontHeight val="9" />
						</ButtonText>
						<NormalFont style="GameFontNormalSmall" />
						<HighlightFont style="GameFontHighlightSmall" />
						<DisabledFont style="GameFontDisableSmall" />
					</Button>
					<CheckButton name="OPOverlayAutoUpdateButton">
						<Size x="24" y="24" />
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeTo="OPOverlaySpellButton">
								<Offset x="20" y="2" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="Auto|n|rUpdate">
									<Anchors>
										<Anchor point="TOP" relativePoint="BOTTOM">
											<Offset y="2" />
										</Anchor>
									</Anchors>
									<FontHeight val="8" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Automatically Updates the Overlay &amp; Tint Sliders, &amp; Spell to the Selected Object.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if self:GetChecked() == true then
									OPMasterTable.Options["autoUpdateTint"] = true
									--self:SetChecked(false)
								else
									OPMasterTable.Options["autoUpdateTint"] = false
									--self:SetChecked(true)
								end
							</OnClick>
							<OnShow>if OPMasterTable.Options["autoUpdateTint"] then self:SetChecked(true) end</OnShow>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton>
					<CheckButton name="OPOverlayUseOverlayCheckbutton">
						<Size x="24" y="24" />
						<Anchors>
							<Anchor point="RIGHT" relativePoint="LEFT" relativeTo="OPOverlayAutoUpdateButton">
								<Offset x="-15" y="-0" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="Use|n|rOverlay">
									<Anchors>
										<Anchor point="TOP" relativePoint="BOTTOM">
											<Offset y="2" />
										</Anchor>
									</Anchors>
									<FontHeight val="8" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnEnter>
								if OPMasterTable.Options["showTooltips"] == true then
									GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
									self.Timer = C_Timer.NewTimer(0.5,function()
										GameTooltip:SetText("Switch between using Tint or Overlay as your coloring method.", nil, nil, nil, nil, true)
										GameTooltip:Show()
									end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if self:GetChecked() == true then
									OPMasterTable.Options["useOverlayMethod"] = true
								else
									OPMasterTable.Options["useOverlayMethod"] = false
								end
							</OnClick>
							<OnShow>if OPMasterTable.Options["useOverlayMethod"] then self:SetChecked(true) end</OnShow>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton>
				</Frames>
			</Frame>
			<Frame name="OPPanel4Rotation" hidden="true">
				<Size x="335" y="132" />
				<Anchors>
					<Anchor point="BOTTOMLEFT">
						<Offset x="10" y="10" />
					</Anchor>
				</Anchors>
				<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
					<BackgroundInsets>
						<AbsInset left="5" right="5" top="5" bottom="5" />
					</BackgroundInsets>
					<TileSize>
						<AbsValue val="16" />
					</TileSize>
					<EdgeSize>
						<AbsValue val="16" />
					</EdgeSize>
					<Color r="0.5" g="0.5" b="0.5" a="0"/>
					<BorderColor r="0.75" g="0.75" b="0.75"/>
				</Backdrop>
				<Frames>
					<EditBox name="OPRotationEditBoxX" autoFocus="false">
						<HighlightColor r="0.5" g="0.5" b="0.5" a="0.75"/>
						<TextInsets>
							<AbsInset left="5" right="0" top="0" bottom="0" />
						</TextInsets>
						<Size x="64" y="23" />
						<Anchors>
							<Anchor point="TOPRIGHT">
								<Offset x="-7" y="-15" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="5" right="5" top="5" bottom="5" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="16" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="16" />
							</EdgeSize>
							<Color r="0.1" g="0.1" b="0.1" a="0.75"/>
							<BorderColor r="0.5" g="0.5" b="0.5"/>
						</Backdrop>
						<Scripts>
							<OnLoad>
								self:SetText("0")
							</OnLoad>
							<OnEscapePressed>
								self:ClearFocus()
							</OnEscapePressed>
							<OnEnterPressed>
								self:ClearFocus()
							</OnEnterPressed>
							<OnTextChanged>
								if self:GetText() == self:GetText():match("%d+") or self:GetText() == self:GetText():match("%d+%.%d+") or self:GetText() == self:GetText():match("%.%d+") then
									self:SetTextColor(255,255,255,1)
								elseif self:GetText() == "" then
									self:SetTextColor(255,255,255,1)
								elseif self:GetText():find("%a") then
									self:SetText(self:GetText():gsub("%a", ""))
								else
									self:SetTextColor(1,0,0,1)
								end
							</OnTextChanged>
							<OnEditFocusLost>
								if self:GetText() == self:GetText():match("%d+") or self:GetText() == self:GetText():match("%d+%.%d+") or self:GetText() == self:GetText():match("%.%d+") then
									local OPRotXEditVal = self:GetText()
									OPRotationSliderX:SetValueStep(0.0001)
									OPRotationSliderX:SetValue(OPRotXEditVal,true)
									OPRotateObject(true)
									OPClearRotateChatFilter()
								end
							</OnEditFocusLost>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Set the value to Roll (Rotate / Tilt Sideways) the selected GameObject to.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Objects will be set to the current Roll, Pitch, and Turn values all together.",1,1,1,true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Typed in numbers will automatically round to 4 decimal places.",1,1,1,true)
									GameTooltip:Show()
								end)
								end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<FontString font="Fonts\ARIALN.TTF" indented="true">
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</EditBox>
					<Slider name="OPRotationSliderX" orientation="HORIZONTAL" enableMouse="true" defaultValue="0" minValue="-1" maxValue="360" valueStep="0.1" ObeyStepOnDrag="true">
						<Size>
							<AbsDimension x="250" y="14" />
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="OPRotationEditBoxX">
								<Offset>
									<AbsDimension x="-253" y="-5" />
								</Offset>
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="8" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="8" />
							</EdgeSize>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString name="$parentTitle" font="Fonts\FRIZQT__.TTF" text="Roll (X | Sideways)">
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset x="10" y="10" />
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="0.8196079" b="0" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentLow" font="Fonts\FRIZQT__.TTF" text="0">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" />
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentHigh" font="Fonts\FRIZQT__.TTF" text="360">
									<Anchors>
										<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT" />
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<ThumbTexture name="$parentThumb" file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
							<Size>
								<AbsDimension x="24" y="24" />
							</Size>
						</ThumbTexture>
						<Scripts>
							<OnMouseDown>
								OPIMFUCKINGROTATINGDONTSPAMME = true
								if self.dragEndTimer then
									self.dragEndTimer:Cancel()
								end
								self.sliderDragChange = true
								self.isDragging = true
							</OnMouseDown>
							<OnMouseUp>
								OPClearRotateChatFilter()
								self.isDragging = false
								self.dragEndTimer = C_Timer.NewTimer(0.2,function()
									if not self.isMousedOver then
										self.sliderDragChange = false
										if OPMasterTable.Options["debug"] then
											print("OPDEBUG: dragEndTimer disabled sliderDragChange. Rounding Disabled.")
										end
									end
								end)
								OPRotateObject(true)
							</OnMouseUp>
							<OnValueChanged>
								if OPFramesAreLoaded then
									local OPRotSliderValX = self:GetValue()
								if userInput then
									if OPMasterTable.Options["debug"] then
										print(self.sliderDragChange)
									end
									if self.sliderDragChange then
										if OPMasterTable.Options["debug"] then
											print("Val ("..OPRotSliderValX..") Rounded to 3 decimals")
										end
										OPRotSliderValX = roundToNthDecimal(OPRotSliderValX,3)
										if IsShiftKeyDown() then
											if IsAltKeyDown() then
												self:SetValueStep(5)
											else
												self:SetValueStep(0.1)
											end
										elseif IsAltKeyDown() then
											self:SetValueStep(0.01)
										else
											self:SetValueStep(1)
										end
									else
										if OPMasterTable.Options["debug"] then
											print("Val ("..OPRotSliderValX..") Rounded to 4 decimals")
										end
										OPRotSliderValX = roundToNthDecimal(OPRotSliderValX,4)
									end
									OPRotationEditBoxX:SetText(OPRotSliderValX)
									if not dontFuckingRotate then OPRotateObject(); end
								end
									OPRotSliderValX = roundToNthDecimal(OPRotSliderValX,4)
									OPRotationEditBoxX:SetText(OPRotSliderValX)
								end
							</OnValueChanged>
							<OnLoad>OPInitializeLoading();</OnLoad>
							<OnEnter>
								self.sliderDragChange = true
								self.isMousedOver = true
								if OPMasterTable.Options["debug"] then
									print("Ye' entered the drag frame, you might drag, so lets classify you as dragging for rounding filter")
								end
								if OPMasterTable.Options["showTooltips"] == true then
									GameTooltip:SetOwner(self, "ANCHOR_LEFT")
									self.Timer = C_Timer.NewTimer(0.5,function()
										GameTooltip:SetText("Drag to change current Roll (Rotate / Tilt Sideways). Values less than 0 will default to 0 (-1 is for saving only).", nil, nil, nil, nil, true)
										GameTooltip:AddLine(" ")
										GameTooltip:AddLine("Rotation will automatically apply (including Pitch and Turn) as it changes.", 1, 1, 1, true)
										GameTooltip:AddLine(" ")
										GameTooltip:AddLine("Modifiers (Hold while Dragging):\nDefault - whole numbers (1)\nSHIFT - 1 decimal place (0.1)\nALT - 2 decimal places (0.01)",1, 1, 1, true)
										GameTooltip:Show()
									end)
								end
							</OnEnter>
							<OnLeave>
								self.isMousedOver = false
								if not self.isDragging then
									self.sliderDragChange = false
									if OPMasterTable.Options["debug"] then
										print("sliderDragChange turned off cuz u left while not dragging.")
									end
								end
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Slider>
					<EditBox name="OPRotationEditBoxY" autoFocus="false">
						<HighlightColor r="0.5" g="0.5" b="0.5" a="0.75"/>
						<TextInsets>
							<AbsInset left="5" right="0" top="0" bottom="0" />
						</TextInsets>
						<Size x="64" y="23" />
						<Anchors>
							<Anchor point="TOPRIGHT">
								<Offset x="-7" y="-42" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="5" right="5" top="5" bottom="5" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="16" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="16" />
							</EdgeSize>
							<Color r="0.1" g="0.1" b="0.1" a="0.75"/>
							<BorderColor r="0.5" g="0.5" b="0.5"/>
						</Backdrop>
						<Scripts>
							<OnLoad>
								self:SetText("0")
							</OnLoad>
							<OnEscapePressed>
								self:ClearFocus()
							</OnEscapePressed>
							<OnEnterPressed>
								self:ClearFocus()
							</OnEnterPressed>
							<OnTextChanged>
								if self:GetText() == self:GetText():match("%d+") or self:GetText() == self:GetText():match("%d+%.%d+") or self:GetText() == self:GetText():match("%.%d+") then
									self:SetTextColor(255,255,255,1)
								elseif self:GetText() == "" then
									self:SetTextColor(255,255,255,1)
								elseif self:GetText():find("%a") then
									self:SetText(self:GetText():gsub("%a", ""))
								else
									self:SetTextColor(1,0,0,1)
								end
							</OnTextChanged>
							<OnEditFocusLost>
								if self:GetText() == self:GetText():match("%d+") or self:GetText() == self:GetText():match("%d+%.%d+") or self:GetText() == self:GetText():match("%.%d+") then
									local OPRotYEditVal = self:GetText()
									OPRotationSliderY:SetValueStep(0.0001)
									OPRotationSliderY:SetValue(OPRotYEditVal,true)
									OPRotateObject(true)
									OPClearRotateChatFilter()
								end
							</OnEditFocusLost>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Set the value to Pitch (Rotate / Tilt Forward) the selected GameObject to.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Objects will be set to the current Roll, Pitch, and Turn values all together.",1,1,1,true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Typed in numbers will automatically round to 4 decimal places.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<FontString font="Fonts\ARIALN.TTF" indented="true">
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</EditBox>
					<Slider name="OPRotationSliderY" orientation="HORIZONTAL" enableMouse="true" defaultValue="0" minValue="-1" maxValue="360" valueStep="0.01" ObeyStepOnDrag="true">
						<Size>
							<AbsDimension x="250" y="14" />
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="OPRotationEditBoxY">
								<Offset>
									<AbsDimension x="-253" y="-5" />
								</Offset>
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="8" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="8" />
							</EdgeSize>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString name="$parentTitle" font="Fonts\FRIZQT__.TTF" text="Pitch (Y | Forward)">
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset x="10" y="10" />
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="0.8196079" b="0" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentLow" font="Fonts\FRIZQT__.TTF" text="0">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" />
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentHigh" font="Fonts\FRIZQT__.TTF" text="360">
									<Anchors>
										<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT" />
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<ThumbTexture name="$parentThumb" file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
							<Size>
								<AbsDimension x="24" y="24" />
							</Size>
						</ThumbTexture>
						<Scripts>
							<OnMouseDown>
								OPIMFUCKINGROTATINGDONTSPAMME = true
								if self.dragEndTimer then
									self.dragEndTimer:Cancel()
								end
								self.sliderDragChange = true
								self.isDragging = true
							</OnMouseDown>
							<OnMouseUp>
								OPClearRotateChatFilter()
								self.isDragging = false
								self.dragEndTimer = C_Timer.NewTimer(0.2,function()
									if not self.isMousedOver then
										self.sliderDragChange = false
										if OPMasterTable.Options["debug"] then
											print("OPDEBUG: dragEndTimer disabled sliderDragChange. Rounding Disabled.")
										end
									end
								end)
								OPRotateObject(true)
							</OnMouseUp>
							<OnValueChanged>
								if OPFramesAreLoaded then
									local OPRotSliderValY = self:GetValue()
								if userInput then
									if OPMasterTable.Options["debug"] then
										print(self.sliderDragChange)
									end
									if self.sliderDragChange then
										if OPMasterTable.Options["debug"] then
											print("Val ("..OPRotSliderValY..") Rounded to 3 decimals")
										end
										OPRotSliderValY = roundToNthDecimal(OPRotSliderValY,3)
										if IsShiftKeyDown() then
											if IsAltKeyDown() then
												self:SetValueStep(5)
											else
												self:SetValueStep(0.1)
											end
										elseif IsAltKeyDown() then
											self:SetValueStep(0.01)
										else
											self:SetValueStep(1)
										end
									else
										if OPMasterTable.Options["debug"] then
											print("Val ("..OPRotSliderValY..") Rounded to 4 decimals")
										end
										OPRotSliderValY = roundToNthDecimal(OPRotSliderValY,4)
									end
									if not dontFuckingRotate then OPRotateObject(); end
								end
								OPRotSliderValY = roundToNthDecimal(OPRotSliderValY,4)
								OPRotationEditBoxY:SetText(OPRotSliderValY)
								end
							</OnValueChanged>
							<OnLoad>OPInitializeLoading();</OnLoad>
							<OnEnter>
								self.sliderDragChange = true
								self.isMousedOver = true
								if OPMasterTable.Options["debug"] then
									print("Ye' entered the drag frame, you might drag, so lets classify you as dragging for rounding filter")
								end
								if OPMasterTable.Options["showTooltips"] == true then
									GameTooltip:SetOwner(self, "ANCHOR_LEFT")
									self.Timer = C_Timer.NewTimer(0.5,function()
										GameTooltip:SetText("Drag to change current Pitch (Rotate / Tilt Forwards). Values less than 0 will default to 0 (-1 is for saving only).", nil, nil, nil, nil, true)
										GameTooltip:AddLine(" ")
										GameTooltip:AddLine("Rotation will automatically apply (including Roll and Turn) as it changes.", 1, 1, 1, true)
										GameTooltip:AddLine(" ")
										GameTooltip:AddLine("Modifiers (Hold while Dragging):\nDefault - whole numbers (1)\nSHIFT - 1 decimal place (0.1)\nALT - 2 decimal places (0.01)",1, 1, 1, true)
										GameTooltip:Show()
									end)
								end
							</OnEnter>
							<OnLeave>
								self.isMousedOver = false
								if not self.isDragging then
									self.sliderDragChange = false
									if OPMasterTable.Options["debug"] then
										print("sliderDragChange turned off cuz u left while not dragging.")
									end
								end
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Slider>
					<EditBox name="OPRotationEditBoxZ" autoFocus="false">
						<HighlightColor r="0.5" g="0.5" b="0.5" a="0.75"/>
						<TextInsets>
							<AbsInset left="5" right="0" top="0" bottom="0" />
						</TextInsets>
						<Size x="64" y="23" />
						<Anchors>
							<Anchor point="TOPRIGHT">
								<Offset x="-7" y="-69" />
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="5" right="5" top="5" bottom="5" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="16" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="16" />
							</EdgeSize>
							<Color r="0.1" g="0.1" b="0.1" a="0.75"/>
							<BorderColor r="0.5" g="0.5" b="0.5"/>
						</Backdrop>
						<Scripts>
							<OnLoad>
								self:SetText("0")
							</OnLoad>
							<OnEscapePressed>
								self:ClearFocus()
							</OnEscapePressed>
							<OnEnterPressed>
								self:ClearFocus()
							</OnEnterPressed>
							<OnTextChanged>
								if self:GetText() == self:GetText():match("%d+") or self:GetText() == self:GetText():match("%d+%.%d+") or self:GetText() == self:GetText():match("%.%d+") then
									self:SetTextColor(255,255,255,1)
								elseif self:GetText() == "" then
									self:SetTextColor(255,255,255,1)
								elseif self:GetText():find("%a") then
									self:SetText(self:GetText():gsub("%a", ""))
								else
									self:SetTextColor(1,0,0,1)
								end
							</OnTextChanged>
							<OnEditFocusGained>OPRotationSliderZ:SetValueStep(0.001)</OnEditFocusGained>
							<OnEditFocusLost>
								if self:GetText() == self:GetText():match("%d+") or self:GetText() == self:GetText():match("%d+%.%d+") or self:GetText() == self:GetText():match("%.%d+") then
									local OPRotZEditVal = self:GetText()
									OPRotationSliderZ:SetValueStep(0.0001)
									OPRotationSliderZ:SetValue(OPRotZEditVal,true)
									OPRotateObject(true)
									OPClearRotateChatFilter()
								end
							</OnEditFocusLost>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Set the value to Turn (Rotate Around / Face) the selected GameObject to.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Objects will be set to the current Roll, Pitch, and Turn values all together.",1,1,1,true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Typed in numbers will automatically round to 4 decimal places.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<FontString font="Fonts\ARIALN.TTF" indented="true">
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</EditBox>
					<Slider name="OPRotationSliderZ" orientation="HORIZONTAL" enableMouse="true" defaultValue="0" minValue="-1" maxValue="360" valueStep="0.01" ObeyStepOnDrag="true">
						<Size>
							<AbsDimension x="250" y="14" />
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="OPRotationEditBoxZ">
								<Offset>
									<AbsDimension x="-253" y="-5" />
								</Offset>
							</Anchor>
						</Anchors>
						<Backdrop bgFile="Interface\Buttons\UI-SliderBar-Background" edgeFile="Interface\Buttons\UI-SliderBar-Border" tile="true">
							<BackgroundInsets>
								<AbsInset left="3" right="3" top="6" bottom="6" />
							</BackgroundInsets>
							<TileSize>
								<AbsValue val="8" />
							</TileSize>
							<EdgeSize>
								<AbsValue val="8" />
							</EdgeSize>
						</Backdrop>
						<Layers>
							<Layer>
								<FontString name="$parentTitle" font="Fonts\FRIZQT__.TTF" text="Turn (Z | Around)">
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset x="10" y="10" />
										</Anchor>
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="0.8196079" b="0" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentLow" font="Fonts\FRIZQT__.TTF" text="0">
									<Anchors>
										<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" />
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
								<FontString name="$parentHigh" font="Fonts\FRIZQT__.TTF" text="360">
									<Anchors>
										<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT" />
									</Anchors>
									<FontHeight>
										<AbsValue val="10" />
									</FontHeight>
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Color r="0" g="0" b="0" />
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<ThumbTexture name="$parentThumb" file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
							<Size>
								<AbsDimension x="24" y="24" />
							</Size>
						</ThumbTexture>
						<Scripts>
							<OnMouseDown>
								OPIMFUCKINGROTATINGDONTSPAMME = true
								if self.dragEndTimer then
									self.dragEndTimer:Cancel()
								end
								self.sliderDragChange = true
								self.isDragging = true
							</OnMouseDown>
							<OnMouseUp>
								OPClearRotateChatFilter()
								self.isDragging = false
								self.dragEndTimer = C_Timer.NewTimer(0.2,function()
									if not self.isMousedOver then
										self.sliderDragChange = false
										if OPMasterTable.Options["debug"] then
											print("OPDEBUG: dragEndTimer disabled sliderDragChange. Rounding Disabled.")
										end
									end
								end)
								OPRotateObject(true)
							</OnMouseUp>
							<OnValueChanged>
								if OPFramesAreLoaded then
									local OPRotSliderValZ = self:GetValue()
								if userInput then
									if OPMasterTable.Options["debug"] then
										print(self.sliderDragChange)
									end
									if self.sliderDragChange then
										if OPMasterTable.Options["debug"] then
											print("Val ("..OPRotSliderValZ..") Rounded to 3 decimals")
										end
										OPRotSliderValZ = roundToNthDecimal(OPRotSliderValZ,3)
										if IsShiftKeyDown() then
											if IsAltKeyDown() then
												self:SetValueStep(5)
											else
												self:SetValueStep(0.1)
											end
										elseif IsAltKeyDown() then
											self:SetValueStep(0.01)
										else
											self:SetValueStep(1)
										end
									else
										if OPMasterTable.Options["debug"] then
											print("Val ("..OPRotSliderValZ..") Rounded to 4 decimals")
										end
										OPRotSliderValZ = roundToNthDecimal(OPRotSliderValZ,4)
									end
									if not dontFuckingRotate then OPRotateObject(); end
								end
								OPRotSliderValZ = roundToNthDecimal(OPRotSliderValZ,4)
								OPRotationEditBoxZ:SetText(OPRotSliderValZ)
								end
							</OnValueChanged>
							<OnLoad>OPInitializeLoading();</OnLoad>
							<OnEnter>
								self.sliderDragChange = true
								self.isMousedOver = true
								if OPMasterTable.Options["debug"] then
									print("Ye' entered the drag frame, you might drag, so lets classify you as dragging for rounding filter")
								end
								if OPMasterTable.Options["showTooltips"] == true then
									GameTooltip:SetOwner(self, "ANCHOR_LEFT")
									self.Timer = C_Timer.NewTimer(0.5,function()
										GameTooltip:SetText("Drag to change current Turn (Rotate Around / Face). Values less than 0 will default to 0 (-1 is for saving only).", nil, nil, nil, nil, true)
										GameTooltip:AddLine(" ")
										GameTooltip:AddLine("Rotation will automatically apply (including Roll and Pitch) as it changes.", 1, 1, 1, true)
										GameTooltip:AddLine(" ")
										GameTooltip:AddLine("Modifiers (Hold while Dragging):\nDefault - whole numbers (1)\nSHIFT - 1 decimal place (0.1)\nALT - 2 decimal places (0.01)",1, 1, 1, true)
										GameTooltip:Show()
									end)
								end
							</OnEnter>
							<OnLeave>
								self.isMousedOver = false
								if not self.isDragging then
									self.sliderDragChange = false
									if OPMasterTable.Options["debug"] then
										print("sliderDragChange turned off cuz u left while not dragging.")
									end
								end
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
					</Slider>
					<Button name="OPRotateApplyButton" inherits="UIPanelButtonTemplate" text="Apply">
						<Size x="56" y="16" />
						<Anchors>
							<Anchor point="BOTTOMRIGHT">
								<Offset y="10" x="-10" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								OPRotateObject(true);
								OPIMFUCKINGROTATINGDONTSPAMME = true
								OPClearRotateChatFilter()
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Applies the current Roll, Pitch, and Turn to the currently selected object.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<ButtonText name="$parentText">
							<FontHeight val="10" />
						</ButtonText>
						<NormalFont style="GameFontNormalSmall" />
						<HighlightFont style="GameFontHighlightSmall" />
						<DisabledFont style="GameFontDisableSmall" />
					</Button>
					<Button name="OPRotSaveButton" inherits="UIPanelButtonTemplate" text="Save">
						<Size x="56" y="16" />
						<Anchors>
							<Anchor point="BOTTOMLEFT">
								<Offset x="8" y="10" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								OPShowRotSaveMenu();
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_LEFT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Opens up a new dialogue to save the current Object Rotations (Roll, Pitch, and Turn) for quickly loading later.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("Leaving a rotation as '-1' will cause it to not load (i.e., setting Roll to '-1' will cause it to leave Roll unchanged when loaded).",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<ButtonText name="$parentText" />
						<NormalFont style="GameFontNormalSmall" />
						<HighlightFont style="GameFontHighlightSmall" />
						<DisabledFont style="GameFontDisableSmall" />
					</Button>
					<CheckButton name="OPRotAutoUpdate">
						<Size x="24" y="24" />
						<Anchors>
							<Anchor point="RIGHT" relativeTo="OPRotateApplyButton" relativePoint="LEFT">
								<Offset x="-50" y="0" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="Auto|nUpdate">
									<Anchors>
										<Anchor point="LEFT">
											<Offset x="25" />
										</Anchor>
									</Anchors>
									<FontHeight val="9" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Automatically Updates the Rotation Sliders to the objects current rotation when you select an object, and when you manually rotate the object via '.go rotate' or '.go pitch/roll/turn'.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
							<OnClick>
								if self:GetChecked() == true then
									OPMasterTable.Options["autoUpdateRot"] = true
									--self:SetChecked(false)
								else
									OPMasterTable.Options["autoUpdateRot"] = false
									--self:SetChecked(true)
								end
							</OnClick>
							<OnShow>if OPMasterTable.Options["autoUpdateRot"] then self:SetChecked(true) end</OnShow>
						</Scripts>
						<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
						<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
						<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
						<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
						<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
					</CheckButton>
				</Frames>
			</Frame>
			<Frame name="OPPanel4Manager" hidden="true">
				<Size x="335" y="132" />
				<Anchors>
					<Anchor point="BOTTOMLEFT">
						<Offset x="10" y="10" />
					</Anchor>
				</Anchors>
				<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
					<BackgroundInsets>
						<AbsInset left="5" right="5" top="5" bottom="5" />
					</BackgroundInsets>
					<TileSize>
						<AbsValue val="16" />
					</TileSize>
					<EdgeSize>
						<AbsValue val="16" />
					</EdgeSize>
					<Color r="0.5" g="0.5" b="0.5" a="0"/>
					<BorderColor r="0.75" g="0.75" b="0.75"/>
				</Backdrop>
				<Layers>
					<Layer>
						<FontString parentKey="SelectedObjName" text="No Object Selected" font="Fonts\FRIZQT__.TTF">
							<Size y="12" />
							<Anchors>
								<Anchor point="TOP">
									<Offset y="-6" />
								</Anchor>
							</Anchors>
							<FontHeight val="12" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<FontString parentKey="WIPAREA" text="This Area is a WIP! More Features to Come!" font="Fonts\FRIZQT__.TTF" wordwrap="true" maxlines="2">
							<Size x="150" y="24" />
							<Anchors>
								<Anchor point="CENTER">
									<Offset y="-35" />
								</Anchor>
							</Anchors>
							<FontHeight val="12" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</Layer>
				</Layers>
				<Frames>
					<Frame parentKey="FaceButtonsAnchor">
						<Size x="10" y="10"/>
						<Anchors>
							<Anchor point="TOPRIGHT">
								<Offset x="-28" y="-50" />
							</Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString parentKey="Title" text="Face Object" font="Fonts\FRIZQT__.TTF">
									<Size x="70" y="8" />
									<Anchors>
										<Anchor point="BOTTOM" relativePoint="TOP">
											<Offset y="22" />
										</Anchor>
									</Anchors>
									<FontHeight val="8" />
									<Color r="1" g="1" b="1" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Frames>
							<Button parentKey="FaceButtonSelf" inherits="UIPanelButtonTemplate" text="C">
								<Size x="18" y="16" />
								<Anchors>
									<Anchor point="center" relativeKey="$parent.FaceButtonsAnchor">
										<Offset x="0" y="0" />
									</Anchor>
								</Anchors>
								<Scripts>
									<OnClick>
										OPManagerCMD("go turn")
									</OnClick>
									<OnEnter>
									if OPMasterTable.Options["showTooltips"] == true then
										GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
										self.Timer = C_Timer.NewTimer(0.5,function()
											GameTooltip:SetText("Face the object to match the direction your character is facing.", nil, nil, nil, nil, true)
											GameTooltip:Show()
										end)
									end
									</OnEnter>
									<OnLeave>
										GameTooltip_Hide()
										if self.Timer then self.Timer:Cancel() end
									</OnLeave>
								</Scripts>
								<ButtonText name="$parentText">
									<FontHeight val="8" />
								</ButtonText>
								<NormalFont style="GameFontNormalTiny2" />
								<HighlightFont style="GameFontWhiteTiny2" />
								<DisabledFont style="GameFontDisableTiny2" />
							</Button>
							<Button parentKey="FaceButtonNorth" inherits="UIPanelButtonTemplate" text="N">
								<Size x="20" y="20" />
								<Anchors>
									<Anchor point="bottom" relativeKey="$parent.FaceButtonsAnchor" relativePoint="top">
										<Offset x="0" y="2" />
									</Anchor>
								</Anchors>
								<Scripts>
									<OnClick>
										OPManagerCMD("go face north")
									</OnClick>
									<OnEnter>
									if OPMasterTable.Options["showTooltips"] == true then
										GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
										self.Timer = C_Timer.NewTimer(0.5,function()
											GameTooltip:SetText("Face the object North.", nil, nil, nil, nil, true)
											GameTooltip:Show()
										end)
									end
									</OnEnter>
									<OnLeave>
										GameTooltip_Hide()
										if self.Timer then self.Timer:Cancel() end
									</OnLeave>
								</Scripts>
								<ButtonText name="$parentText">
									<FontHeight val="8" />
								</ButtonText>
								<NormalFont style="GameFontNormalTiny2" />
								<HighlightFont style="GameFontWhiteTiny2" />
								<DisabledFont style="GameFontDisableTiny2" />
							</Button>
							<Button parentKey="FaceButtonSouth" inherits="UIPanelButtonTemplate" text="S">
								<Size x="20" y="20" />
								<Anchors>
									<Anchor point="top" relativeKey="$parent.FaceButtonsAnchor" relativePoint="bottom">
										<Offset x="0" y="-2" />
									</Anchor>
								</Anchors>
								<Scripts>
									<OnClick>
										OPManagerCMD("go face south")
									</OnClick>
									<OnEnter>
									if OPMasterTable.Options["showTooltips"] == true then
										GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
										self.Timer = C_Timer.NewTimer(0.5,function()
											GameTooltip:SetText("Face the object South.", nil, nil, nil, nil, true)
											GameTooltip:Show()
										end)
									end
									</OnEnter>
									<OnLeave>
										GameTooltip_Hide()
										if self.Timer then self.Timer:Cancel() end
									</OnLeave>
								</Scripts>
								<ButtonText name="$parentText">
									<FontHeight val="8" />
								</ButtonText>
								<NormalFont style="GameFontNormalTiny2" />
								<HighlightFont style="GameFontWhiteTiny2" />
								<DisabledFont style="GameFontDisableTiny2" />
							</Button>
							<Button parentKey="FaceButtonEast" inherits="UIPanelButtonTemplate" text="E">
								<Size x="20" y="20" />
								<Anchors>
									<Anchor point="left" relativeKey="$parent.FaceButtonsAnchor" relativePoint="right">
										<Offset x="2" y="0" />
									</Anchor>
								</Anchors>
								<Scripts>
									<OnClick>
										OPManagerCMD("go face east")
									</OnClick>
									<OnEnter>
									if OPMasterTable.Options["showTooltips"] == true then
										GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
										self.Timer = C_Timer.NewTimer(0.5,function()
											GameTooltip:SetText("Face the object East.", nil, nil, nil, nil, true)
											GameTooltip:Show()
										end)
									end
									</OnEnter>
									<OnLeave>
										GameTooltip_Hide()
										if self.Timer then self.Timer:Cancel() end
									</OnLeave>
								</Scripts>
								<ButtonText name="$parentText">
									<FontHeight val="8" />
								</ButtonText>
								<NormalFont style="GameFontNormalTiny2" />
								<HighlightFont style="GameFontWhiteTiny2" />
								<DisabledFont style="GameFontDisableTiny2" />
							</Button>
							<Button parentKey="FaceButtonWest" inherits="UIPanelButtonTemplate" text="W">
								<Size x="20" y="20" />
								<Anchors>
									<Anchor point="right" relativeKey="$parent.FaceButtonsAnchor" relativePoint="left">
										<Offset x="-2" y="0" />
									</Anchor>
								</Anchors>
								<Scripts>
									<OnClick>
										OPManagerCMD("go face west")
									</OnClick>
									<OnEnter>
									if OPMasterTable.Options["showTooltips"] == true then
										GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
										self.Timer = C_Timer.NewTimer(0.5,function()
											GameTooltip:SetText("Face the object West.", nil, nil, nil, nil, true)
											GameTooltip:Show()
										end)
									end
									</OnEnter>
									<OnLeave>
										GameTooltip_Hide()
										if self.Timer then self.Timer:Cancel() end
									</OnLeave>
								</Scripts>
								<ButtonText name="$parentText">
									<FontHeight val="8" />
								</ButtonText>
								<NormalFont style="GameFontNormalTiny2" />
								<HighlightFont style="GameFontWhiteTiny2" />
								<DisabledFont style="GameFontDisableTiny2" />
							</Button>
						</Frames>
					</Frame>
					<Button parentKey="SelectButton" inherits="UIPanelButtonTemplate" text="Select">
						<Size x="72" y="24" />
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset x="10" y="-20" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								OPManagerCMD("go sel")
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Select the nearest object to you.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<ButtonText parentKey="Text">
							<FontHeight val="10" />
						</ButtonText>
						<NormalFont style="GameFontNormalSmall" />
						<HighlightFont style="GameFontHighlightSmall" />
						<DisabledFont style="GameFontDisableSmall" />
					</Button>
					<Button parentKey="UnselectButton" inherits="UIPanelButtonTemplate" text="Unselect">
						<Size x="72" y="24" />
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeKey="$parent.SelectButton">
								<Offset x="0" y="-3" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								OPManagerCMD("go unsel")
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Copies the currently selected object in the same spot.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<ButtonText parentKey="Text">
							<FontHeight val="10" />
						</ButtonText>
						<NormalFont style="GameFontNormalSmall" />
						<HighlightFont style="GameFontHighlightSmall" />
						<DisabledFont style="GameFontDisableSmall" />
					</Button>
					<Button parentKey="CopyButton" inherits="UIPanelButtonTemplate" text="Copy">
						<Size x="72" y="24" />
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeKey="$parent.UnselectButton">
								<Offset x="0" y="-3" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								OPManagerCMD("go copy f 0")
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Copies the currently selected object in the same spot.", nil, nil, nil, nil, true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<ButtonText parentKey="Text">
							<FontHeight val="10" />
						</ButtonText>
						<NormalFont style="GameFontNormalSmall" />
						<HighlightFont style="GameFontHighlightSmall" />
						<DisabledFont style="GameFontDisableSmall" />
					</Button>
					<Button parentKey="DeleteButton" inherits="UIPanelButtonTemplate" text="Delete" registerForClicks="RightButtonUp, LeftButtonUp">
						<Size x="72" y="24" />
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeKey="$parent.CopyButton">
								<Offset x="0" y="-3" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								if button == "RightButton" then
									OPManagerCMD("go del")
								else
									OPManagerPrint("You must right click the delete button to delete an object.")
								end
							</OnClick>
							<OnEnter>
							if OPMasterTable.Options["showTooltips"] == true then
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
								self.Timer = C_Timer.NewTimer(0.5,function()
									GameTooltip:SetText("Deletes the selected object.", nil, nil, nil, nil, true)
									GameTooltip:AddLine(" ")
									GameTooltip:AddLine("You must right click for this to work to avoid accidental deletion.",1,1,1,true)
									GameTooltip:Show()
								end)
							end
							</OnEnter>
							<OnLeave>
								GameTooltip_Hide()
								if self.Timer then self.Timer:Cancel() end
							</OnLeave>
						</Scripts>
						<ButtonText parentKey="Text">
							<FontHeight val="10" />
						</ButtonText>
						<NormalFont style="GameFontNormalSmall" />
						<HighlightFont style="GameFontHighlightSmall" />
						<DisabledFont style="GameFontDisableSmall" />
					</Button>
					<Frame name="OPVisibilityDropdownAnchor" parentKey="VisibilityDropdownPositioner">
						<Anchors>
							<Anchor point="LEFT" relativePoint="RIGHT" relativeKey="$parent.SelectButton">
								<Offset x="-15" y="-3" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self.staticList = {
									{ text = "Select a Visibility", isTitle = true},
									{ text = "Ultra Low (10)", func = function() OPSetObjVis(10); end },
									{ text = "Very Low (50)", func = function() OPSetObjVis(50); end },
									{ text = "Low (100)", func = function() OPSetObjVis(100); end },
									{ text = "Medium (300)", func = function() OPSetObjVis(300); end },
									{ text = "High (533)", func = function() OPSetObjVis(533); end },
									{ text = "Permanent (-1)", func = function() OPSetObjVis("-1"); end },
									{ text = "None/Reset (0)", func = function() OPSetObjVis("0"); end },
									{ text = "Custom", func = function() StaticPopup_Show("OP_OBJ_VISIBILITY"); end },
								}
								OP_genStaticDropdownChild( self, "OPVisibilityDropdownMenu", self.staticList, "Visibility", 55 )
								OPVisibilityDropdownMenuButton:HookScript("OnEnter", function(self)
									if OPMasterTable.Options["showTooltips"] == true then
										GameTooltip:SetOwner(self, "ANCHOR_LEFT")
										self.Timer = C_Timer.NewTimer(0.5,function()
											GameTooltip:SetText("Set the selected Object/Groups visibility.", nil, nil, nil, nil, true)
											GameTooltip:Show()
										end)
									end
								end)
								OPVisibilityDropdownMenuButton:HookScript("OnLeave", function(self)
									GameTooltip_Hide()
									if self.Timer then self.Timer:Cancel() end
								end)
							</OnLoad>
						</Scripts>
					</Frame>
					<Frame name="OPAnimDropdownAnchor" parentKey="AnimDropdownPositioner">
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOM" relativeTo="OPVisibilityDropdownAnchor">
								<Offset x="0" y="5" />
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self.staticList = {
									{ text = "Select an Animation", isTitle = true},
									{ text = "0 - Stand (Default)", func = function() OPSetObjAnim(0); end },
									{ text = "145 - Spawn", func = function() OPSetObjAnim(145); end },
									{ text = "146 - Close", func = function() OPSetObjAnim(146); end },
									{ text = "147 - Closed", func = function() OPSetObjAnim(147); end },
									{ text = "148 - Open", func = function() OPSetObjAnim(148); end },
									{ text = "149 - Opened", func = function() OPSetObjAnim(149); end },
									{ text = "150 - Destroy", func = function() OPSetObjAnim(150); end },
									{ text = "157 - Despawn", func = function() OPSetObjAnim(157); end },
									{ text = "Custom", func = function() StaticPopup_Show("OP_OBJ_ANIMATION"); end },
								}
								OP_genStaticDropdownChild( self, "OPAnimationDropdownMenu", self.staticList, "Animation", 55 )
								OPVisibilityDropdownMenuButton:HookScript("OnEnter", function(self)
									if OPMasterTable.Options["showTooltips"] == true then
										GameTooltip:SetOwner(self, "ANCHOR_LEFT")
										self.Timer = C_Timer.NewTimer(0.5,function()
											GameTooltip:SetText("Set the selected Object's Animation.", nil, nil, nil, nil, true)
											GameTooltip:Show()
										end)
									end
								end)
								OPVisibilityDropdownMenuButton:HookScript("OnLeave", function(self)
									GameTooltip_Hide()
									if self.Timer then self.Timer:Cancel() end
								end)
							</OnLoad>
						</Scripts>
					</Frame>
				</Frames>
			</Frame>
			<Button name="$parentTab1" inherits="CharacterFrameTabButtonTemplate" id="1" text="Rotation">
				<Anchors>
					<Anchor point="CENTER" relativePoint="BOTTOMLEFT">
						<Offset>
							<AbsDimension x="60" y="-9"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						PanelTemplates_SetTab(OPMainFrame, 1);
						OPPanel4Rotation:Show();
						OPPanel4Overlay:Hide();
						OPPanel4Manager:Hide();
					</OnClick>
				</Scripts>
			</Button>
<!--			
			<Button name="$parentTab3" inherits="CharacterFrameTabButtonTemplate" id="3" text="Tint">
				<Anchors>
					<Anchor point="LEFT" relativeTo="$parentTab2" relativePoint="RIGHT">
						<Offset>
							<AbsDimension x="-16" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						PanelTemplates_SetTab(OPMainFrame, 2);
						OPPanel4Rotation:Hide();
						OPPanel4Tint:Show();
						OPPanel4Overlay:Hide();
					</OnClick>
				</Scripts>
			</Button>
-->
			<Button name="$parentTab2" inherits="CharacterFrameTabButtonTemplate" id="2" text="Tint &amp; Overlay">
				<Anchors>
					<Anchor point="LEFT" relativeTo="$parentTab1" relativePoint="RIGHT">
						<Offset>
							<AbsDimension x="-16" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						PanelTemplates_SetTab(OPMainFrame, 2);
						OPPanel4Rotation:Hide();
						OPPanel4Overlay:Show();
						OPPanel4Manager:Hide();
					</OnClick>
				</Scripts>
			</Button>
			<Button name="$parentTab3" inherits="CharacterFrameTabButtonTemplate" id="3" text="Manager">
				<Anchors>
					<Anchor point="LEFT" relativeTo="$parentTab2" relativePoint="RIGHT">
						<Offset>
							<AbsDimension x="-16" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						PanelTemplates_SetTab(OPMainFrame, 3);
						OPPanel4Rotation:Hide();
						OPPanel4Overlay:Hide();
						OPPanel4Manager:Show();
					</OnClick>
					<OnEnter>
					if OPMasterTable.Options["showTooltips"] == true then
						GameTooltip:SetOwner(self, "ANCHOR_LEFT")
						self.Timer = C_Timer.NewTimer(0.5,function()
							GameTooltip:SetText("Object &amp; Group Manager", nil, nil, nil, nil, true)
							GameTooltip:AddLine(" ")
							GameTooltip:AddLine("A quick list of buttons to manage &amp; change objects, like Select, Copy, and Group controls.",1,1,1,true)
							GameTooltip:Show()
						end)
					end
					</OnEnter>
					<OnLeave>
						GameTooltip_Hide()
						if self.Timer then self.Timer:Cancel() end
					</OnLeave>
				</Scripts>
			</Button>
			
			
			<Button name="$parentCloseButton" inherits="UIPanelCloseButton" text="Button1">
				<Size x="25" y="25" />
				<Anchors>
					<Anchor point="TOPRIGHT">
						<Offset x="2" y="2" />
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						if tonumber(OPLengthBox:GetText()) == 6 and tonumber(OPWidthBox:GetText()) == 6 and tonumber(OPHeightBox:GetText()) == 6 then
							print("You.. Are Not Prepared!")
							PlaySound("11466")
						end
						HideParentPanel(self);
					</OnClick>
				</Scripts>
			</Button>

			<Button name="$parentPositionLockButton" text="Frame Position Lock">
				<Size>
					<AbsDimension x="25" y="25"/>
				</Size>
				<DisabledTexture file="Interface\Buttons\LockButton-Border"/>
				<NormalTexture file="Interface\Buttons\LockButton-Unlocked-Up"/>
				<PushedTexture file="Interface\Buttons\LockButton-Unlocked-Down"/>
				<HighlightTexture file="Interface\Buttons\UI-Panel-MinimizeButton-Highlight" alphaMode="ADD"/>
				<Anchors>
					<Anchor point="RIGHT" relativeTo="$parentCloseButton" relativePoint="LEFT">
						<Offset x="8" y="0" />
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						OPMasterTable.Options["locked"] = not OPMasterTable.Options["locked"]
						if not OPMasterTable.Options["locked"] then
							self:SetNormalTexture("Interface\\Buttons\\LockButton-Unlocked-Up");
							self:SetPushedTexture("Interface\\Buttons\\LockButton-Unlocked-Down");
							self:SetDisabledTexture("Interface\\Buttons\\LockButton-Border");
						else
							self:SetNormalTexture("Interface\\Buttons\\LockButton-Locked-Up");
							self:SetPushedTexture("Interface\\Buttons\\LockButton-Unlocked-Down");
							self:SetDisabledTexture("Interface\\Buttons\\LockButton-Border");
						end
					</OnClick>
					<OnShow>
						if not OPMasterTable.Options["locked"] then
							self:SetNormalTexture("Interface\\Buttons\\LockButton-Unlocked-Up");
							self:SetPushedTexture("Interface\\Buttons\\LockButton-Unlocked-Down");
							self:SetDisabledTexture("Interface\\Buttons\\LockButton-Border");
						else
							self:SetNormalTexture("Interface\\Buttons\\LockButton-Locked-Up");
							self:SetPushedTexture("Interface\\Buttons\\LockButton-Unlocked-Down");
							self:SetDisabledTexture("Interface\\Buttons\\LockButton-Border");
						end
					</OnShow>
					<OnLoad>
						if not OPMasterTable.Options["locked"] then
							self:SetNormalTexture("Interface\\Buttons\\LockButton-Unlocked-Up");
							self:SetPushedTexture("Interface\\Buttons\\LockButton-Unlocked-Down");
							self:SetDisabledTexture("Interface\\Buttons\\LockButton-Border");
						else
							self:SetNormalTexture("Interface\\Buttons\\LockButton-Locked-Up");
							self:SetPushedTexture("Interface\\Buttons\\LockButton-Unlocked-Down");
							self:SetDisabledTexture("Interface\\Buttons\\LockButton-Border");
						end
					</OnLoad>
					<OnEnter>
					if OPMasterTable.Options["showTooltips"] == true then
						GameTooltip:SetOwner(self, "ANCHOR_LEFT")
						self.Timer = C_Timer.NewTimer(0.5,function()
							GameTooltip:SetText("Locks the UI from being moved.", nil, nil, nil, nil, true)
							GameTooltip:Show()
						end)
					end
					</OnEnter>
					<OnLeave>
						GameTooltip_Hide()
						if self.Timer then self.Timer:Cancel() end
					</OnLeave>
				</Scripts>
			</Button>
			<Button parentKey="ResizeButton" text="Resize" hidden="false" registerForClicks="RightButtonUp">
				<Size>
					<AbsDimension x="16" y="16"/>
				</Size>
				<NormalTexture file="Interface\ChatFrame\UI-ChatIM-SizeGrabber-Up"/>
				<PushedTexture file="Interface\ChatFrame\UI-ChatIM-SizeGrabber-Down"/>
				<HighlightTexture file="Interface\ChatFrame\UI-ChatIM-SizeGrabber-Highlight" alphaMode="ADD"/>
				<Anchors>
					<Anchor point="BOTTOMRIGHT">
						<Offset x="-4" y="5" />
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						if button == "RightButton" then
							self:GetParent():SetWidth(355)
						end
					</OnClick>
					<OnMouseDown>
						if button == "LeftButton" then
							local parent = self:GetParent()
							self.isScaling = true
							parent:StartSizing("BOTTOMRIGHT")
						end
					</OnMouseDown>
					<OnMouseUp>
						if button == "LeftButton" then
							local parent = self:GetParent()
							self.isScaling = false
							parent:StopMovingOrSizing()
						end
					</OnMouseUp>
					<OnEnter>
					if OPMasterTable.Options["showTooltips"] == true then
						GameTooltip:SetOwner(self, "ANCHOR_LEFT")
						self.Timer = C_Timer.NewTimer(0.5,function()
							GameTooltip:SetText("Drag to resize the UI.", nil, nil, nil, nil, true)
							GameTooltip:AddLine(" ")
							GameTooltip:AddLine("Right Click to reset the size to default.",1,1,1,true)
							GameTooltip:Show()
						end)
					end
					</OnEnter>
					<OnLeave>
						GameTooltip_Hide()
						if self.Timer then self.Timer:Cancel() end
					</OnLeave>
				</Scripts>
			</Button>
		</Frames>
		<Scripts>
			<OnShow>
				OPMainFrame_OnShow()
			</OnShow>
			<OnLoad>
				self:RegisterForDrag("LeftButton");
				OPCreateLoadDropDownMenus()
				PanelTemplates_SetNumTabs(OPMainFrame, 3);
				PanelTemplates_SetTab(OPMainFrame, 1);
				OPPanel4Rotation:Show()
				OPPanel4Overlay:Hide()
				OPPanel4Manager:Hide()
				OPUpdateMoveButtons()
			</OnLoad>
			<OnDragStart>
			if not OPMasterTable.Options["locked"] then
				self:StartMoving();
			end
			</OnDragStart>
			<OnDragStop>self:StopMovingOrSizing();</OnDragStop>
			<OnUpdate function="OPMainFrame_OnUpdate"/>
			<OnSizeChanged>
				local n = self:GetWidth()
				local n = n / 355
				local childrens = {self:GetChildren()}
				for _,child in ipairs(childrens) do
					if child ~= 1 then child:SetScale(n) end
				end
				self:SetHeight(355*n)
			</OnSizeChanged>
		</Scripts>
	</Frame>
	<Frame name="OPPanelPopout" hidden="true" movable="true" resizable="true" clampedToScreen="true" parent="UIParent" ignoreParentScale="true">
		<Size x="180" y="345" />
		<ResizeBounds>
			<minResize x="90" y="172"/>
			<maxResize x="355" y="650"/>
		</ResizeBounds>
		<Anchors>
			<Anchor point="RIGHT" relativeTo="OPMainFrame" relativePoint="LEFT">
				<Offset x="0" y="0" />
			</Anchor>
		</Anchors>
		<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
			<BackgroundInsets>
				<AbsInset left="4" right="4" top="4" bottom="4" />
			</BackgroundInsets>
			<TileSize>
				<AbsValue val="16" />
			</TileSize>
			<EdgeSize>
				<AbsValue val="16" />
			</EdgeSize>
			<Color r="0" g="0" b="0" a="0.5"/>
			<BorderColor r="0.75" g="0.75" b="0.75"/>
		</Backdrop>
		<Layers>
			<Layer>
				<FontString parentKey="Title" text="Selected Object Info" font="Fonts\FRIZQT__.TTF">
					<Size x="150" y="12" />
					<Anchors>
						<Anchor point="TOP">
							<Offset y="-6" />
						</Anchor>
					</Anchors>
					<FontHeight val="12" />
					<Color r="1" g="0.8196079" b="0" />
					<Shadow>
						<Offset>
							<AbsDimension x="1" y="-1" />
						</Offset>
						<Color r="0" g="0" b="0" />
					</Shadow>
				</FontString>
			</Layer>
		</Layers>
		<Frames>
			<Button parentKey="CloseButton" inherits="UIPanelCloseButton" text="Button1">
				<Size x="25" y="25" />
				<Anchors>
					<Anchor point="TOPRIGHT">
						<Offset x="2" y="2" />
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						HideParentPanel(self);
					</OnClick>
				</Scripts>
			</Button>
			<Frame parentKey="ObjName">
				<Size x="180" y="37"/>
				<Anchors>
					<Anchor point="TOPLEFT">
						<Offset x="0" y="-24" />
					</Anchor>
				</Anchors>
				<Layers>
					<Layer>
						<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Object Name:">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset x="8" y="0" />
								</Anchor>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="No Object Selected" wordwrap="true" nonspacewrap="true" maxlines="2" justifyH="RIGHT">
							<Size x="164" y="16" />
							<Anchors>
								<Anchor relativeKey="$parent.Title" point="TOPLEFT" relativePoint="BOTTOMLEFT">
									<Offset x="0" y="-3" />
								</Anchor>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<Line name="Divider" thickness="1" >
							<StartAnchor relativekey="$parent.Text" point="BOTTOMLEFT">
								<Offset x="0" y="-4"/>
							</StartAnchor>
							<EndAnchor relativekey="$parent.Text" point="BOTTOMLEFT">
								<Offset x="164" y="-4"/>
							</EndAnchor>
							<color r="0.66" g="0.66" b="0.66" a="1"/>
						</Line>
					</Layer>
				</Layers>
			</Frame>
			<Frame parentKey="ObjEntry">
				<Size x="180" y="17"/>
				<Anchors>
					<Anchor relativeKey="$parent.ObjName" point="TOPLEFT" relativePoint="BOTTOMLEFT">
						<Offset x="0" y="0" />
					</Anchor>
				</Anchors>
				<Layers>
					<Layer>
						<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Entry:">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset x="8" y="0" />
								</Anchor>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="" justifyH="RIGHT">
							<Size x="130" y="10" />
							<Anchors>
								<Anchor relativeKey="$parent.Title" point="TOPLEFT" relativePoint="TOPRIGHT"/>
								<Anchor relativeKey="$parent.Title" point="TOPRIGHT" relativePoint="TOPLEFT" x="164"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<Line name="Divider" thickness="1" >
							<StartAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="0" y="-4"/>
							</StartAnchor>
							<EndAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="164" y="-4"/>
							</EndAnchor>
							<color r="0.66" g="0.66" b="0.66" a="1"/>
						</Line>
					</Layer>
				</Layers>
			</Frame>
			<Frame parentKey="ObjDisplay">
				<Size x="180" y="17"/>
				<Anchors>
					<Anchor relativeKey="$parent.ObjEntry" point="TOPLEFT" relativePoint="BOTTOMLEFT">
						<Offset x="0" y="0" />
					</Anchor>
				</Anchors>
				<Layers>
					<Layer>
						<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="DisplayID:">
							<Anchors>
								<Anchor point="TOPLEFT" x="8"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="No Data Available" justifyH="RIGHT">
							<Size y="10" />
							<Anchors>
								<Anchor relativeKey="$parent.Title" point="TOPLEFT" relativePoint="TOPRIGHT"/>
								<Anchor relativeKey="$parent.Title" point="TOPRIGHT" relativePoint="TOPLEFT" x="164"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<Line name="Divider" thickness="1" >
							<StartAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="0" y="-4"/>
							</StartAnchor>
							<EndAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="164" y="-4"/>
							</EndAnchor>
							<color r="0.66" g="0.66" b="0.66" a="1"/>
						</Line>
					</Layer>
				</Layers>
			</Frame>
			<Frame parentKey="ObjType">
				<Size x="180" y="17"/>
				<Anchors>
					<Anchor relativeKey="$parent.ObjDisplay" point="TOPLEFT" relativePoint="BOTTOMLEFT">
						<Offset x="0" y="0" />
					</Anchor>
				</Anchors>
				<Layers>
					<Layer>
						<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Type:">
							<Anchors>
								<Anchor point="TOPLEFT" x="8"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="No Data Available" justifyH="RIGHT">
							<Size y="10" />
							<Anchors>
								<Anchor relativeKey="$parent.Title" point="TOPLEFT" relativePoint="TOPRIGHT"/>
								<Anchor relativeKey="$parent.Title" point="TOPRIGHT" relativePoint="TOPLEFT" x="164"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<Line name="Divider" thickness="1" >
							<StartAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="0" y="-4"/>
							</StartAnchor>
							<EndAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="164" y="-4"/>
							</EndAnchor>
							<color r="0.66" g="0.66" b="0.66" a="1"/>
						</Line>
					</Layer>
				</Layers>
			</Frame>
			<Frame parentKey="ObjState">
				<Size x="180" y="17"/>
				<Anchors>
					<Anchor relativeKey="$parent.ObjType" point="TOPLEFT" relativePoint="BOTTOMLEFT">
						<Offset x="0" y="0" />
					</Anchor>
				</Anchors>
				<Layers>
					<Layer>
						<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="State:">
							<Anchors>
								<Anchor point="TOPLEFT" x="8"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="No Data Available" justifyH="RIGHT">
							<Size y="10" />
							<Anchors>
								<Anchor relativeKey="$parent.Title" point="TOPLEFT" relativePoint="TOPRIGHT"/>
								<Anchor relativeKey="$parent.Title" point="TOPRIGHT" relativePoint="TOPLEFT" x="164"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<Line name="Divider" thickness="1" >
							<StartAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="0" y="-4"/>
							</StartAnchor>
							<EndAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="164" y="-4"/>
							</EndAnchor>
							<color r="0.66" g="0.66" b="0.66" a="1"/>
						</Line>
					</Layer>
				</Layers>
			</Frame>
			<Frame parentKey="ObjAnim">
				<Size x="180" y="17"/>
				<Anchors>
					<Anchor relativeKey="$parent.ObjState" point="TOPLEFT" relativePoint="BOTTOMLEFT">
						<Offset x="0" y="0" />
					</Anchor>
				</Anchors>
				<Layers>
					<Layer>
						<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Anim:">
							<Anchors>
								<Anchor point="TOPLEFT" x="8"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="No Data Available" justifyH="RIGHT">
							<Size y="10" />
							<Anchors>
								<Anchor relativeKey="$parent.Title" point="TOPLEFT" relativePoint="TOPRIGHT"/>
								<Anchor relativeKey="$parent.Title" point="TOPRIGHT" relativePoint="TOPLEFT" x="164"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<Line name="Divider" thickness="1" >
							<StartAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="0" y="-4"/>
							</StartAnchor>
							<EndAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="164" y="-4"/>
							</EndAnchor>
							<color r="0.66" g="0.66" b="0.66" a="1"/>
						</Line>
					</Layer>
				</Layers>
			</Frame>
			<Frame parentKey="ObjScale">
				<Size x="180" y="17"/>
				<Anchors>
					<Anchor relativeKey="$parent.ObjAnim" point="TOPLEFT" relativePoint="BOTTOMLEFT">
						<Offset x="0" y="0" />
					</Anchor>
				</Anchors>
				<Layers>
					<Layer>
						<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Scale:">
							<Anchors>
								<Anchor point="TOPLEFT" x="8"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="No Data Available" justifyH="RIGHT">
							<Size y="10" />
							<Anchors>
								<Anchor relativeKey="$parent.Title" point="TOPLEFT" relativePoint="TOPRIGHT"/>
								<Anchor relativeKey="$parent.Title" point="TOPRIGHT" relativePoint="TOPLEFT" x="164"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<Line name="Divider" thickness="1" >
							<StartAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="0" y="-4"/>
							</StartAnchor>
							<EndAnchor relativekey="$parent.Title" point="BOTTOMLEFT">
								<Offset x="164" y="-4"/>
							</EndAnchor>
							<color r="0.66" g="0.66" b="0.66" a="1"/>
						</Line>
					</Layer>
				</Layers>
			</Frame>
			<Frame parentKey="ObjDimensions" enableMouse="true">
				<Size x="180" y="17"/>
				<Anchors>
					<Anchor relativeKey="$parent.ObjScale" point="TOPLEFT" relativePoint="BOTTOMLEFT">
						<Offset x="0" y="0" />
					</Anchor>
				</Anchors>
				<Layers>
					<Layer>
						<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Dimensions (LxWxH):">
							<Anchors>
								<Anchor point="TOPLEFT" x="8"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="No Data Available" justifyH="RIGHT">
							<Size y="10" />
							<Anchors>
								<Anchor relativeKey="$parent.Title" point="TOPLEFT" relativePoint="BOTTOMLEFT"/>
								<Anchor relativeKey="$parent.Title" point="TOPRIGHT" relativePoint="BOTTOMLEFT" x="164"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="1" b="1" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
						<Line name="Divider" thickness="1" >
							<StartAnchor relativekey="$parent.Text" point="BOTTOMLEFT">
								<Offset x="0" y="-4"/>
							</StartAnchor>
							<EndAnchor relativekey="$parent.Text" point="BOTTOMLEFT">
								<Offset x="164" y="-4"/>
							</EndAnchor>
							<color r="0.66" g="0.66" b="0.66" a="1"/>
						</Line>
					</Layer>
				</Layers>
				<Scripts>
					<OnEnter>
						GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
						self.Timer = C_Timer.NewTimer(0.5,function()
							GameTooltip:SetText("Dimensions:", nil, nil, nil, nil, true)
							GameTooltip:AddLine(" ")
							GameTooltip:AddLine("X: "..(OPSelectedObjectDimX or "N/A"),1,1,1,true)
							GameTooltip:AddLine("Y: "..(OPSelectedObjectDimY or "N/A"),1,1,1,true)
							GameTooltip:AddLine("Z: "..(OPSelectedObjectDimZ or "N/A"),1,1,1,true)
							GameTooltip:Show()
						end)
					</OnEnter>
					<OnLeave>
						GameTooltip_Hide()
						if self.Timer then self.Timer:Cancel() end
					</OnLeave>
				</Scripts>
			</Frame>
			<Frame parentKey="ObjPreview">
				<Size x="180" y="160"/>
				<Anchors>
					<Anchor point="BOTTOMLEFT">
						<Offset x="0" y="0" />
					</Anchor>
				</Anchors>
				<Layers>
					<Layer>
						<FontString parentKey="Title" font="Fonts\FRIZQT__.TTF" text="Preview:">
							<Anchors>
								<Anchor point="TOPLEFT" x="8" y="-4"/>
							</Anchors>
							<FontHeight val="10" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</Layer>
				</Layers>
				<Frames>
					<ModelScene parentKey="Scene" mixin="ModelSceneMixin" enableMouse="true">
						<Size x="170" y="154"/>
						<Anchors>
							<Anchor point="BOTTOMLEFT" x="5" y="4"/>
						</Anchors>
						<Actors>
							<Actor parentKey="Actor">
								<Scripts>
									<OnModelLoaded function="OPObjectPreviewerActor_OnModelLoaded"/>
								</Scripts>
							</Actor>
						</Actors>
						<Scripts>
							<OnLoad inherit="prepend" function="OPObjectPreviewer_OnLoad"/>
							<OnUpdate inherit="prepend" function="OPObjectPreviewer_OnUpdate"/>
							<OnMouseWheel inherit="prepend" function="OPObjectPreviewer_OnMouseWheel"/>
							<OnMouseUp inherit="prepend" function="OPObjectPreviewer_OnClick"/>
						</Scripts>
					</ModelScene>
				</Frames>
				<!--
				<Scripts>
					<OnLoad function="OPObjectPreviewGenerateFrame"/>
				</Scripts>
				-->
			</Frame>
			<Button parentKey="ResizeButton" frameStrata="HIGH" enableMouse="true" text="Resize" hidden="false" registerForClicks="RightButtonUp">
				<Size>
					<AbsDimension x="16" y="16"/>
				</Size>
				<NormalTexture file="Interface\ChatFrame\UI-ChatIM-SizeGrabber-Up"/>
				<PushedTexture file="Interface\ChatFrame\UI-ChatIM-SizeGrabber-Down"/>
				<HighlightTexture file="Interface\ChatFrame\UI-ChatIM-SizeGrabber-Highlight" alphaMode="ADD"/>
				<Anchors>
					<Anchor point="BOTTOMRIGHT">
						<Offset x="-1" y="1" />
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						if button == "RightButton" then
							self:GetParent():SetWidth(185)
						end
					</OnClick>
					<OnMouseDown>
						if button == "LeftButton" then
							local parent = self:GetParent()
							self.isScaling = true
							parent:StartSizing("BOTTOMRIGHT")
						end
					</OnMouseDown>
					<OnMouseUp>
					if button == "LeftButton" then
						local parent = self:GetParent()
						self.isScaling = false
						parent:StopMovingOrSizing()
					end
					</OnMouseUp>
					<OnEnter>
					if OPMasterTable.Options["showTooltips"] == true then
						GameTooltip:SetOwner(self, "ANCHOR_LEFT")
						self.Timer = C_Timer.NewTimer(0.5,function()
							GameTooltip:SetText("Drag to resize the UI.", nil, nil, nil, nil, true)
							GameTooltip:AddLine(" ")
							GameTooltip:AddLine("Right Click to reset the size to default.",1,1,1,true)
							GameTooltip:Show()
						end)
					end
					</OnEnter>
					<OnLeave>
						GameTooltip_Hide()
						if self.Timer then self.Timer:Cancel() end
					</OnLeave>
				</Scripts>
			</Button>
		</Frames>
		<Scripts>
			<OnLoad>
				self:RegisterForDrag("LeftButton");
			</OnLoad>
			<OnShow>
				if self:GetHeight() > UIParent:GetHeight() then self:SetWidth(max(180,UIParent:GetHeight()*0.52)) end
				OPMasterTable.Options["wasPopoutShown"] = true
			</OnShow>
			<OnHide>
				OPMasterTable.Options["wasPopoutShown"] = false
			</OnHide>
			<OnDragStart>
				if not OPMasterTable.Options["locked"] then
					self:StartMoving();
				end
			</OnDragStart>
			<OnDragStop>self:StopMovingOrSizing();</OnDragStop>
			<OnSizeChanged>
				local n = self:GetWidth()
				local n = n / 180
				local childrens = {self:GetChildren()}
				for _,child in ipairs(childrens) do
					if child ~= 1 then child:SetScale(n) end
					self.Title:SetScale(n)
				end
				self:SetHeight(345*n)
			</OnSizeChanged>
		</Scripts>
	</Frame>
	<Frame name="OPMainSaveFrame" frameStrata="DIALOG" hidden="true" enableMouse="true" clampedToScreen="true">
		<Size x="220" y="75" />
		<Anchors>
			<Anchor point="CENTER" relativeTo="UIParent">
				<Offset y="100"/>
			</Anchor>
		</Anchors>
		<TitleRegion setAllPoints="true" />
		<Backdrop bgFile="Interface\DialogFrame\UI-DialogBox-Background" edgeFile="Interface\DialogFrame\UI-DialogBox-Border" tile="true">
			<BackgroundInsets>
				<AbsInset left="11" right="12" top="12" bottom="11" />
			</BackgroundInsets>
			<TileSize>
				<AbsValue val="32" />
			</TileSize>
			<EdgeSize>
				<AbsValue val="32" />
			</EdgeSize>
		</Backdrop>
		<Frames>
			<Frame name="$parentTitle">
				<Size>
					<AbsDimension x="200" y="12" />
				</Size>
				<Anchors>
					<Anchor point="TOP">
						<Offset y="-10" />
					</Anchor>
				</Anchors>
				<Layers>
					<Layer>
						<FontString name="$parentText" font="Fonts\FRIZQT__.TTF" text="Save Name:">
							<Anchors>
								<Anchor point="TOPLEFT" />
								<Anchor point="BOTTOMRIGHT" />
							</Anchors>
							<FontHeight val="12" />
							<Color r="1" g="0.8196079" b="0" />
							<Shadow>
								<Offset>
									<AbsDimension x="1" y="-1" />
								</Offset>
								<Color r="0" g="0" b="0" />
							</Shadow>
						</FontString>
					</Layer>
				</Layers>
			</Frame>
			<EditBox name="$parentEditBox" autoFocus="false">
				<HighlightColor r="0.5" g="0.5" b="0.5" a="0.75"/>
				<TextInsets>
					<AbsInset left="5" right="0" top="0" bottom="0" />
				</TextInsets>
				<Size x="180" y="23" />
				<Anchors>
					<Anchor point="CENTER">
						<Offset y="5" />
					</Anchor>
				</Anchors>
				<Backdrop bgFile="Interface\Tooltips\UI-Tooltip-Background" edgeFile="Interface\Tooltips\UI-Tooltip-Border" tile="true">
					<BackgroundInsets>
						<AbsInset left="5" right="5" top="5" bottom="5" />
					</BackgroundInsets>
					<TileSize>
						<AbsValue val="16" />
					</TileSize>
					<EdgeSize>
						<AbsValue val="16" />
					</EdgeSize>
					<Color r="0.1" g="0.1" b="0.1" a="0.75"/>
					<BorderColor r="0.5" g="0.5" b="0.5"/>
				</Backdrop>
				<Scripts>
					<OnShow>
						self:SetText("")
						self:SetFocus()
					</OnShow>
					<OnEscapePressed>
						self:ClearFocus()
					</OnEscapePressed>
					<OnEnterPressed>
						self:ClearFocus()
						OPSaveMenuActualSave();
					</OnEnterPressed>
				</Scripts>
				<FontString font="Fonts\ARIALN.TTF" indented="true">
					<FontHeight val="10" />
					<Color r="1" g="1" b="1" />
					<Shadow>
						<Offset>
							<AbsDimension x="1" y="-1" />
						</Offset>
						<Color r="0" g="0" b="0" />
					</Shadow>
				</FontString>
			</EditBox>
			<Button name="$parentSaveButton" inherits="UIPanelButtonTemplate" text="Save">
				<Size x="64" y="16" />
				<Anchors>
					<Anchor point="CENTER">
						<Offset x="-40" y="-16" />
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						OPSaveMenuActualSave();
					</OnClick>
				</Scripts>
				<ButtonText name="$parentText" />
				<NormalFont style="GameFontNormalSmall" />
				<HighlightFont style="GameFontHighlightSmall" />
				<DisabledFont style="GameFontDisableSmall" />
			</Button>
			<Button name="$parentCancelButton" inherits="UIPanelButtonTemplate" text="Cancel">
				<Size x="64" y="16" />
				<Anchors>
					<Anchor point="CENTER">
						<Offset x="40" y="-16" />
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						OPMainSaveFrame:Hide();
						confirmRSaveOverwrite = false
						confirmPSaveOverwrite = false
					</OnClick>
				</Scripts>
				<ButtonText name="$parentText" />
				<NormalFont style="GameFontNormalSmall" />
				<HighlightFont style="GameFontHighlightSmall" />
				<DisabledFont style="GameFontDisableSmall" />
			</Button>
		</Frames>
	</Frame>
	<Button name="ObjectManipulator_MinimapButton" parent="Minimap" enableMouse="true" movable="true" hidden="false" frameStrata="MEDIUM" frameLevel="62" clampedToScreen="true" motionScriptsWhileDisabled="true">
		<Size>
			<AbsDimension x="33" y="33" />
		</Size>
		<Anchors>
			<Anchor point="CENTER" relativeTo="Minimap" relativePoint="BOTTOM"/>
		</Anchors>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture name="ObjectManipulator_MinimapButton_Icon" file="Interface/AddOns/ObjectMover/Media/ObjectMoverIcon.blp">
				<!-- Original Icon: Interface/ICONS/INV_Misc_Gear_01 -->
					<Size>
						<AbsDimension x="27" y="27" />
					</Size>
					<Anchors>
						<Anchor point="TOPLEFT">
							<Offset>
								<AbsDimension x="4" y="-3" />
							</Offset>
						</Anchor>
					</Anchors>
				</Texture>
			</Layer>
			<!--
			<Layer level="OVERLAY">
				<Texture name="ObjectManipulator_MinimapButton_Border" file="Interface\Minimap\MiniMap-TrackingBorder">
					<Size>
						<AbsDimension x="56" y="56" />
					</Size>
					<Anchors>
						<Anchor point="TOPLEFT" />
					</Anchors>
				</Texture>
			</Layer>
			-->
		</Layers>
		<Scripts>
			<OnLoad>
				self:RegisterForClicks("LeftButtonUp","RightButtonUp","MiddleButtonUp")
				self:RegisterForDrag("LeftButton","RightButton")
				
				local cowbell  = OMUICowbellTest or CreateFrame("Frame", "OMUICowbellTest", UIParent)
				local keyCount = 1
				local function HandleKey(self, key)
				local keyOrder = {"UP","UP","DOWN","DOWN","LEFT","RIGHT","LEFT","RIGHT","B","A","ENTER"}
				if key == keyOrder[keyCount] then keyCount=keyCount+1 else keyCount = 1 end
				if keyCount == 12 then
				print("NEED MORE COWBELL!")
				PlaySound(47631, "MASTER")
				C_Timer.After(1,function() PlaySound(79392, "MASTER") end)
				keyCount = 1
				end
				end
				cowbell:SetScript("OnKeyDown", HandleKey)
				cowbell:SetPropagateKeyboardInput(true)
			</OnLoad>
			<OnLeave>
				ResetCursor();
				GameTooltip:Hide()
			</OnLeave>
			<OnDragStart function="ObjectManipulator_MinimapButton_OnDragStart"/>
			<OnDragStop function="ObjectManipulator_MinimapButton_OnDragStop"/>
			<OnClick>
				if button == "RightButton" then 
					if not OPNewOptionsFrame:IsShown() then OPNewOptionsFrame:Show() else OPNewOptionsFrame:Hide() end
				elseif button == "LeftButton" then
					SlashCmdList.SHOWCLOSE()
				elseif button == "MiddleButton" then
					if OPPanelPopout:IsShown() then
						OPPanelPopout:Hide()
					else
						OPPanelPopout:Show()
					end
				end
			</OnClick>
		</Scripts>
		<HighlightTexture file="Interface\Minimap\UI-Minimap-ZoomButton-Highlight" alphaMode="ADD" />
	</Button>
	<Frame name="OPNewOptionsFrame" hidden="true" enableMouse="true" movable="true" clampedToScreen="true" parent="UIParent">
		<Size x="500" y="600" />
		<Anchors>
			<Anchor point="CENTER"/>
		</Anchors>
		<Frames>
			<Frame parentKey="Border" inherits="DialogBorderTemplate"/>
			<Frame parentKey="Header" inherits="DialogHeaderTemplate">
				<KeyValues>
					<KeyValue key="textString" value="ObjectMover" type="string"/>
				</KeyValues>
			</Frame>
			<Button name="$parentCloseButton" parentKey="CloseButton" inherits="UIPanelCloseButton">
				<Anchors>
					<Anchor point="TOPRIGHT" relativePoint="TOPRIGHT" x="-5.6" y="-4"/>
				</Anchors>
				<Frames>
					<Frame parentKey="Border">
						<Size x="32" y="32"/>
						<Backdrop bgFile="Interface\DialogFrame\UI-DialogBox-Corner.PNG" edgeFile="" />
						<Anchors>
							<Anchor point="TOPLEFT" x="-4" y="-4" />
						</Anchors>
					</Frame>
				</Frames>
			</Button>
			<Frame parentKey="MainArea">
				<Anchors>
					<Anchor point="TOPLEFT"/>
					<Anchor point="BOTTOMRIGHT"/>
				</Anchors>
				<Frames>
					<Frame parentKey="NewOptions" name="OPNewOptionsPanel" hidden="true">
						<Anchors>
						  <Anchor point="TOPLEFT">
							<Offset>
							  <AbsDimension x="18" y="-32"/>
							</Offset>
						  </Anchor>
						  <Anchor point="BOTTOMRIGHT">
							<Offset>
							  <AbsDimension x="-36" y="12"/>
							</Offset>
						  </Anchor>
						</Anchors>
						<Layers>
							<Layer>
								<FontString parentKey="WIPTitleText" font="Fonts\FRIZQT__.TTF" text="More Options Coming Soon!">
									<Anchors>
										<Anchor point="BOTTOMLEFT" y="12" />
										<Anchor point="BOTTOMRIGHT" y="0" />
									</Anchors>
									<FontHeight val="12" />
									<Color r="1" g="0.8196079" b="0" />
									<Shadow>
										<Offset>
											<AbsDimension x="1" y="-1" />
										</Offset>
										<Color r="0" g="0" b="0" />
									</Shadow>
								</FontString>
							</Layer>
						</Layers>
						<Frames>
							<CheckButton name="OPDebugModeToggleButton">
								<Size x="24" y="24" />
								<Anchors>
									<Anchor point="BOTTOMRIGHT">
										<Offset x="24" y="-1" />
									</Anchor>
								</Anchors>
								<Layers>
									<Layer>
										<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="DEBUG">
											<Anchors>
												<Anchor point="RIGHT" relativePoint="LEFT">
													<Offset x="0.5" y="0.5" />
												</Anchor>
											</Anchors>
											<FontHeight val="8" />
											<Color r="1" g="1" b="1" />
											<Shadow>
												<Offset>
													<AbsDimension x="1" y="-1" />
												</Offset>
												<Color r="0" g="0" b="0" />
											</Shadow>
										</FontString>
									</Layer>
								</Layers>
								<Scripts>
									<OnEnter>
										GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
										self.Timer = C_Timer.NewTimer(0.5,function()
											GameTooltip:SetText("Toggle DEBUG mode.", nil, nil, nil, nil, true)
											GameTooltip:AddLine(" ")
											GameTooltip:AddLine("Keep this off unless you really need it, otherwise you'll get hella chat spam..",1,1,1,true)
											GameTooltip:Show()
										end)
									</OnEnter>
									<OnLeave>
										GameTooltip_Hide()
										if self.Timer then self.Timer:Cancel() end
									</OnLeave>
									<OnClick>
										if self:GetChecked() == true then
											OPMasterTable.Options["debug"] = true
											--self:SetChecked(false)
										else
											OPMasterTable.Options["debug"] = false
											--self:SetChecked(true)
										end
									</OnClick>
									<OnShow>if OPMasterTable.Options["debug"] then self:SetChecked(true) end</OnShow>
								</Scripts>
								<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
								<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
								<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
								<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
								<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
							</CheckButton>
							<CheckButton name="OPShowTooltipsToggleButton">
								<Size x="24" y="24" />
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset x="6" y="-12" />
									</Anchor>
								</Anchors>
								<Layers>
									<Layer>
										<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="Show Tooltips">
											<Anchors>
												<Anchor point="LEFT" relativePoint="RIGHT">
													<Offset x="0.5" y="0.5" />
												</Anchor>
											</Anchors>
											<FontHeight val="12" />
											<Color r="1" g="1" b="1" />
											<Shadow>
												<Offset>
													<AbsDimension x="1" y="-1" />
												</Offset>
												<Color r="0" g="0" b="0" />
											</Shadow>
										</FontString>
									</Layer>
								</Layers>
								<Scripts>
									<OnEnter>
										GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
										self.Timer = C_Timer.NewTimer(0.5,function()
											GameTooltip:SetText("Show tooltips (THESE!) when hovering your mouse over buttons, text boxes, or other UI elements in ObjectMover.", nil, nil, nil, nil, true)
											GameTooltip:AddLine(" ")
											GameTooltip:AddLine("No, you can't turn this one off.",1,1,1,true)
											GameTooltip:Show()
										end)
									</OnEnter>
									<OnLeave>
										GameTooltip_Hide()
										if self.Timer then self.Timer:Cancel() end
									</OnLeave>
									<OnClick>
										if self:GetChecked() == true then
											OPMasterTable.Options["showTooltips"] = true
											--self:SetChecked(false)
										else
											OPMasterTable.Options["showTooltips"] = false
											--self:SetChecked(true)
										end
									</OnClick>
									<OnShow>if OPMasterTable.Options["showTooltips"] then self:SetChecked(true) end</OnShow>
								</Scripts>
								<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
								<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
								<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
								<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
								<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
							</CheckButton>
							<CheckButton name="OPAutoshowPopoutToggleButton">
								<Size x="24" y="24" />
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="OPShowTooltipsToggleButton" relativePoint="BOTTOMLEFT">
										<Offset x="0" y="-4" />
									</Anchor>
								</Anchors>
								<Layers>
									<Layer>
										<FontString parentKey="Text" font="Fonts\FRIZQT__.TTF" text="AutoShow Selected Object (i) Popout">
											<Anchors>
												<Anchor point="LEFT" relativePoint="RIGHT">
													<Offset x="0.5" y="0.5" />
												</Anchor>
											</Anchors>
											<FontHeight val="12" />
											<Color r="1" g="1" b="1" />
											<Shadow>
												<Offset>
													<AbsDimension x="1" y="-1" />
												</Offset>
												<Color r="0" g="0" b="0" />
											</Shadow>
										</FontString>
									</Layer>
								</Layers>
								<Scripts>
									<OnEnter>
										GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
										self.Timer = C_Timer.NewTimer(0.5,function()
											GameTooltip:SetText("AutoShow the Selected Object Popout Panel when Loading.", nil, nil, nil, nil, true)
											GameTooltip:Show()
										end)
									</OnEnter>
									<OnLeave>
										GameTooltip_Hide()
										if self.Timer then self.Timer:Cancel() end
									</OnLeave>
									<OnClick>
										if self:GetChecked() == true then
											OPMasterTable.Options["autoShowPopout"] = true
										else
											OPMasterTable.Options["autoShowPopout"] = false
										end
									</OnClick>
									<OnShow>if OPMasterTable.Options["autoShowPopout"] then self:SetChecked(true) end</OnShow>
								</Scripts>
								<NormalTexture file="Interface\Buttons\UI-CheckBox-Up" />
								<PushedTexture file="Interface\Buttons\UI-CheckBox-Down" />
								<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD" />
								<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check" />
								<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled" />
							</CheckButton>
						</Frames>
						<Scripts>
						</Scripts>
					</Frame>
					<ScrollFrame parentKey="Changelog" name="OPChangeLogScrollframe" inherits="UIPanelScrollFrameTemplate" hidden="true">
						<Anchors>
						  <Anchor point="TOPLEFT">
							<Offset>
							  <AbsDimension x="18" y="-32"/>
							</Offset>
						  </Anchor>
						  <Anchor point="BOTTOMRIGHT">
							<Offset>
							  <AbsDimension x="-36" y="12"/>
							</Offset>
						  </Anchor>
						</Anchors>
						<ScrollChild>
							<SimpleHTML name="$parentChangelogHTML">
								<Size>
									<AbsDimension x="446" y="600"/>
								</Size>
								<Scripts>
									<OnHyperlinkClick>
										HTML_HyperlinkClick_Copy(self,link)
									</OnHyperlinkClick>
									<OnLoad>
										self:SetFontObject("p", GameFontNormal);
										self:SetFontObject("h1", GameFontNormalHuge2);
										self:SetFontObject("h2", GameFontNormalLarge);
										self:SetFontObject("h3", GameFontNormalMed2);
										self:SetText(stringtoHTML(ObjectMoverChangelog))
									</OnLoad>
								</Scripts>
								<FontString inherits="GameFontNormalSmall" justifyH="LEFT" justifyV="TOP" spacing="2">
									<Color r="1" g="1" b="1"/>
								</FontString>
							</SimpleHTML>
						</ScrollChild>
						<Scripts>
							<OnLoad>
								ScrollFrame_OnLoad(self);
							</OnLoad>
						</Scripts>
					</ScrollFrame>
					<ScrollFrame parentKey="Help" name="OPHelpMeScrollframe" inherits="UIPanelScrollFrameTemplate" hidden="true">
						<Anchors>
						  <Anchor point="TOPLEFT">
							<Offset>
							  <AbsDimension x="18" y="-32"/>
							</Offset>
						  </Anchor>
						  <Anchor point="BOTTOMRIGHT">
							<Offset>
							  <AbsDimension x="-36" y="12"/>
							</Offset>
						  </Anchor>
						</Anchors>
						<ScrollChild>
							<SimpleHTML name="$parentHelpManualHTML">
								<Size>
									<AbsDimension x="446" y="600"/>
								</Size>
								<Scripts>
									<OnHyperlinkClick>
										SetItemRef(link, text, button, self);
									</OnHyperlinkClick>
									<OnLoad>
										self:SetFontObject("p", GameFontNormal);
										self:SetFontObject("h1", GameFontNormalHuge2);
										self:SetFontObject("h2", GameFontNormalLarge);
										self:SetFontObject("h3", GameFontNormalMed2);
										self:SetText(stringtoHTML(ObjectMoverHelpManual))
									</OnLoad>
								</Scripts>
								<FontString inherits="GameFontNormalSmall" justifyH="LEFT" justifyV="TOP" spacing="2">
									<Color r="1" g="1" b="1"/>
								</FontString>
							</SimpleHTML>
						</ScrollChild>
						<Scripts>
							<OnLoad>
								ScrollFrame_OnLoad(self);
							</OnLoad>
						</Scripts>
					</ScrollFrame>
				</Frames>
			</Frame>
			<Button name="$parentTab1" inherits="CharacterFrameTabButtonTemplate" id="1" text="Options">
				<Anchors>
					<Anchor point="CENTER" relativePoint="BOTTOMLEFT">
						<Offset>
							<AbsDimension x="60" y="-9"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						PanelTemplates_SetTab(OPNewOptionsFrame, 1);
						OPNewOptionsFrame.MainArea.Changelog:Hide();
						OPNewOptionsFrame.MainArea.Help:Hide();
						OPNewOptionsFrame.MainArea.NewOptions:Show();
					</OnClick>
				</Scripts>
			</Button>
			<Button name="$parentTab2" inherits="CharacterFrameTabButtonTemplate" id="2" text="Changelog">
				<Anchors>
					<Anchor point="LEFT" relativeTo="$parentTab1" relativePoint="RIGHT">
						<Offset>
							<AbsDimension x="-16" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						PanelTemplates_SetTab(OPNewOptionsFrame, 2);
						OPNewOptionsFrame.MainArea.Changelog:Show();
						OPNewOptionsFrame.MainArea.Help:Hide();
						OPNewOptionsFrame.MainArea.NewOptions:Hide();
					</OnClick>
				</Scripts>
			</Button>
			<Button name="$parentTab3" inherits="CharacterFrameTabButtonTemplate" id="3" text="Help">
				<Anchors>
					<Anchor point="LEFT" relativeTo="$parentTab2" relativePoint="RIGHT">
						<Offset>
							<AbsDimension x="-16" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						PanelTemplates_SetTab(OPNewOptionsFrame, 3);
						OPNewOptionsFrame.MainArea.Changelog:Hide();
						OPNewOptionsFrame.MainArea.NewOptions:Hide();
						OPNewOptionsFrame.MainArea.Help:Show();
					</OnClick>
				</Scripts>
			</Button>
		</Frames>
		<Scripts>
			<OnLoad>
				PanelTemplates_SetNumTabs(OPNewOptionsFrame, 3);
				PanelTemplates_SetTab(OPNewOptionsFrame, 1);
				OPNewOptionsFrame.MainArea.NewOptions:Show();
				tinsert(UISpecialFrames, self:GetName());
			</OnLoad>
		</Scripts>
	</Frame>
</Ui>